<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[iOS基础知识总结二]]></title>
      <url>http://huntermz.site/2017/08/22/iOS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="NSString-用-copy-和-strong-修饰的区别"><a href="#NSString-用-copy-和-strong-修饰的区别" class="headerlink" title="NSString 用 copy 和 strong 修饰的区别"></a>NSString 用 <code>copy</code> 和 <code>strong</code> 修饰的区别</h1><ul>
<li>OC 中 NSString 为不可变字符串的时候，用 <code>copy</code> 和 <code>strong</code> 都是只分配一次内存。但是如果使用 <code>copy</code> ,需要判断字符串是否是不可变字符串，如果是不可变字符串，就不再分配空间，如果是可变字符串才分派空间。如果程序中用到 <code>NSString</code> 的地方特别多，每一次都要先进行判断就会耗费性能。用 <code>strong</code> 就不会判断，所以在类型已知的情况下，可以直接使用 <code>strong</code>。</li>
</ul>
<h1 id="NSArray、NSMutableArray、NSSet、NSMutableSet、NSDictionary、NSMutableDictionary"><a href="#NSArray、NSMutableArray、NSSet、NSMutableSet、NSDictionary、NSMutableDictionary" class="headerlink" title="NSArray、NSMutableArray、NSSet、NSMutableSet、NSDictionary、NSMutableDictionary"></a>NSArray、NSMutableArray、NSSet、NSMutableSet、NSDictionary、NSMutableDictionary</h1><ul>
<li>特点<ul>
<li>NSArray：<br>不可变数组，有序，只能存储对象类型，可通过索引直接访问元素，而且元素类型可以不一样，但是不能进行增、删、改操作；</li>
<li>NSMutableArray:<br>可变数组，能进行增、删、改操作。通过索引查询值很快，但是插入、删除效率很低。</li>
<li>NSSet：<br>不可变集合，确定、互异、无序。只能访问不能修改。</li>
<li>NSMutableSet:<br>可变集合，可以对集合增、删、改操作。集合通过值查询很快，插入、删除操作极快。</li>
<li>NSDictionary:<br>不可变字典，无序，每个key对应的值唯一，可以通过key取值；</li>
<li>NSMutableDictionary:<br>可变字典，能对字典进行增、删、改操作。通过key查询、插入、删除值都很快。</li>
</ul>
</li>
<li><p>应用场景</p>
<ul>
<li>数组用于处理一组有序的数据集，比如常用列表的 dataSource 要求有序，可通过索引直接访问，效率高。</li>
<li>集合要求具有确定性、互异性、无序性，在开发中少用到。</li>
<li><p>字典是键值对集合，操作字典效率高，时间复杂度为常量，但是值是无序的。</p>
<a id="more"></a>
</li>
</ul>
</li>
</ul>
<h1 id="instancetype-和-id"><a href="#instancetype-和-id" class="headerlink" title="instancetype 和 id"></a>instancetype 和 id</h1><ul>
<li>都可以作为方法的返回类型。</li>
<li><code>instancetype</code> 可以返回和方法所在类相同类型的对象，<code>id</code> 只能返回未知类型的对象。简单来说就是 <code>instancetype</code> 在编译期确定实例的类型，而 <code>id</code> 在运行时检查类型。</li>
<li><code>instancetype</code> 只能作为返回值，不能像 <code>id</code> 那样作为参数。</li>
</ul>
<h1 id="野指针、内存泄露、僵尸对象、空指针"><a href="#野指针、内存泄露、僵尸对象、空指针" class="headerlink" title="野指针、内存泄露、僵尸对象、空指针"></a>野指针、内存泄露、僵尸对象、空指针</h1><ul>
<li><p>野指针：指针变量没有进行初始化或者指向的空间已经被释放。</p>
<ul>
<li>使用野指针调用方法，会报异常，崩溃。</li>
<li>通常在调用玩 <code>release</code> 方法后，把保存对象的地址清空，赋值为nil, OC 中没有空指针异常，所以 <code>[nil retain]</code> 调用方法是不会有异常。</li>
</ul>
</li>
<li><p>内存泄露：</p>
<ul>
<li>如 <code>Person *person = [Person new]</code> （对象提前赋值nil, 或者清空），在栈区的 <code>person</code> 已经被释放了，而堆区new产生的对象还没有被释放，就会造成内存泄露。</li>
<li>在MRC模式下，没有配对释放或者对象提前赋值nil导致release不起作用，会引起内存泄露。</li>
</ul>
</li>
<li><p>僵尸对象：堆中已经被释放的对象。</p>
</li>
<li>空指针：指针赋值为空，nil。</li>
</ul>
<h1 id="自动释放池是什么？如何工作？"><a href="#自动释放池是什么？如何工作？" class="headerlink" title="自动释放池是什么？如何工作？"></a>自动释放池是什么？如何工作？</h1><ul>
<li>自动释放池是用来存储多个对象类型的指针变量。</li>
<li>存入自动释放池的对象在自动释放池被销毁时，会对池内对象全部做一次release操作。</li>
<li>调用对象的 <code>autorelease</code> 方法可以把对象加入池中。</li>
<li>自动释放池在当前的 <code>runloop</code> 迭代结束时释放。一旦监听到 <code>Runloop</code> 即将进入睡眠等待状态，就释放自动释放池。</li>
<li>多次调用对象的 <code>autorelease</code> 会导致 <code>野指针异常</code>。</li>
</ul>
<h1 id="如何检查内存泄露"><a href="#如何检查内存泄露" class="headerlink" title="如何检查内存泄露"></a>如何检查内存泄露</h1><ul>
<li>静态分析：analyze</li>
<li>instruments 工具里有个leak可以动态分析，如果在 Block 中多次使用 weakSelf 的话，可以在 Block 中先使用 strongSelf，防止 Block 执行时 weakSelf 被意外释放。</li>
</ul>
<h1 id="内存缓存机制实现"><a href="#内存缓存机制实现" class="headerlink" title="内存缓存机制实现"></a>内存缓存机制实现</h1><ul>
<li>FIFO：新数据插入FIFO队列的尾部；数据在FIFO队列中顺序移动，淘汰队列头部的数据。</li>
<li>LRU：新数据插入链表头部；每当缓存数据命中，则将数据移到链表头部；当链表满的时候，将链表尾部的数据丢弃。</li>
<li>LFU：新数据插入队列尾部；队列中的数据被访问后，引用计数增加，队列重新排序；当需要淘汰数据时，将已经排序的列表最后的数据块删除。</li>
</ul>
<h1 id="常见的内存引用场景"><a href="#常见的内存引用场景" class="headerlink" title="常见的内存引用场景"></a>常见的内存引用场景</h1><ul>
<li>定时器：<code>NSTimer</code> 经常被作为某个类的成员变量，而 <code>NSTimer</code> 初始化时要指定 self 为 target ，容易造成循环引用 <code>self ——&gt;timer--&gt;self</code> 另外，若timer一直处于 validate 的状态，则其引用计数将始终大于 0， 因此在不再使用定时器以后，应该先调用 <code>invalidate</code> 方法。</li>
<li>Block：Block 在 copy 时都会对Block内部用的对象进行强引用。<code>self--&gt;block--&gt;self</code> 或者 <code>self--&gt;block--_ivar(成员变量)</code>。</li>
<li>代理：在声明 <code>delegate</code> 时，使用 weak.</li>
</ul>
<h1 id="KVO-的底层实现"><a href="#KVO-的底层实现" class="headerlink" title="KVO 的底层实现"></a>KVO 的底层实现</h1><ul>
<li><p>KVO 基于 runtime 机制实现。</p>
</li>
<li><p>当一个对象(假设是 person 对象， person 是 MYPerson)的属性值发生改变时，系统会自动生成一个类(继承自 MYPerson) NSKVONotifying_MYPerson，在这个类的 <code>setAge</code> 方法里，调用<code>[self willChangeValueForKey:@&quot;age&quot;] 和 [self didChangeValueForKey:@&quot;age&quot;]</code>，而这两个方法内部会主动调用监听者内部的 <code>- (void)observeValueForKeyPath</code> 这个方法。</p>
</li>
<li><p>当添加监听者后，person类型由 MYPerson 被改变成 NSKVONotifying_MYPerson</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS基础知识总结一]]></title>
      <url>http://huntermz.site/2017/08/16/iOS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E4%B8%80/</url>
      <content type="html"><![CDATA[<h1 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h1><ul>
<li><p>管理方式: 栈由编译器自动管理；堆由程序员手动管理。</p>
</li>
<li><p>大小： </p>
<ul>
<li>栈：在Windows下，栈是向低地址扩展的数据结构，是一块连续的内存区域。意思是，栈顶的地址和栈的最大容量是系统预先规定好的。</li>
<li>堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储空闲内存地址的。而链表的遍历方向是由低地址向高地址。堆的大小取决于计算机的虚拟内存。由此可见，堆可以获得更大更灵活的内存空间。</li>
</ul>
</li>
<li><p>碎片问题：<br>  对于堆来说，频繁的new/delete 会造成内存空间的不连续，从而造成大量的碎片，是程序效率降低。栈则不存在这个问题。因为栈是先进后出的队列，永远不可能有一个内存块从栈中间弹出。</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>分配方式：<br>  堆是动态分配的，没有静态分配的堆。<br>  栈有两种分配方式：</p>
<ul>
<li>静态分配：编译器完成的，比如局部变量的分配。</li>
<li>动态分配：由 <code>alloc</code> 函数进行分配。区别于堆的动态分配的是，栈的动态分配由编译器完成，无需手动实现。</li>
</ul>
</li>
<li><p>分配效率：<br>  栈是机器系统提供的数据结构，计算机底层对栈提供支持，分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，因此效率高；堆则是C/C++函数库提供的，机制很复杂。</p>
</li>
</ul>
<h1 id="Core-Foundation-的内存管理"><a href="#Core-Foundation-的内存管理" class="headerlink" title="Core Foundation 的内存管理"></a>Core Foundation 的内存管理</h1><ul>
<li>凡是带有Create、Copy、Retain 等字眼的函数，创建出来的对象，都需要在最后做一次release。</li>
<li>比如：<code>CFRunLoopObserverCreate release</code></li>
</ul>
<h1 id="OC-的反射机制"><a href="#OC-的反射机制" class="headerlink" title="OC 的反射机制"></a>OC 的反射机制</h1><ul>
<li><p>Class 反射：</p>
<ul>
<li><p>通过类名的字符串实例化对象：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class tempClass = <span class="built_in">NSClassFromString</span>(<span class="string">@"student"</span>);</div><div class="line">Student *stu = [[tempClass alloc] init]</div></pre></td></tr></table></figure>
</li>
<li><p>将类名变成字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class class =[Student class]; </div><div class="line">NSString *className = NSStringFromClass(class);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>SELL 的反射</p>
<ul>
<li><p>通过方法的字符串实例化方法：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SEL selector = <span class="built_in">NSSelectorFromClass</span>(<span class="string">@"setName"</span>);  </div><div class="line">[stu performSelector:selector withObject:<span class="string">@"Mike"</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>将方法变成字符串</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSStringFomrSelector</span>(<span class="keyword">@selector</span>*(setName:))</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="协议中能否定义成员变量？"><a href="#协议中能否定义成员变量？" class="headerlink" title="协议中能否定义成员变量？"></a>协议中能否定义成员变量？</h1><ul>
<li>可以，但是只能在头文件中声明，编译器不会自动生成实例变量。需要自己处理 <code>getter</code>和<code>setter</code> 方法</li>
</ul>
<h1 id="如何理解Objective-C是动态运行时语言"><a href="#如何理解Objective-C是动态运行时语言" class="headerlink" title="如何理解Objective-C是动态运行时语言"></a>如何理解Objective-C是动态运行时语言</h1><ul>
<li>将数据类型的确定、调用类别对象指定的方法由编译时，推迟到运行时。</li>
<li>多态：不同对象以自己的方式响应相同的消息。</li>
</ul>
<h1 id="readwrite、readonly、-assign、-retain、-copy、nonatomic"><a href="#readwrite、readonly、-assign、-retain、-copy、nonatomic" class="headerlink" title="readwrite、readonly、 assign、 retain、 copy、nonatomic"></a>readwrite、readonly、 assign、 retain、 copy、nonatomic</h1><ul>
<li>readwrite：可读可写.要生成getter 和 setter 方法；</li>
<li>readonly：只读。成getter方法。属性不可在类外修改。</li>
<li>assign：赋值。用于基本数据类型的属性修饰。是一个property的默认属性。</li>
<li>copy：修饰string类型。在setter方法里，将传入的对象复制一份，再赋值。</li>
<li>nonatomic：非原子操作，决定编译器生成的setter 和 getter 是否是原子操作。</li>
<li>atomic：表示多线安全，一般不使用。</li>
<li><p>retain：持有。setter方法中先保留参数，再赋值，并且传入参数的retaincount+1</p>
</li>
<li><p>strong：修饰一般对象。和retain同义。先保留</p>
</li>
<li>weak：编译器将为weak修饰的property生成带__weak所有权修饰符的实例变量。</li>
</ul>
<h1 id="NotificationCenter、KVC、KVO、Delegate"><a href="#NotificationCenter、KVC、KVO、Delegate" class="headerlink" title="NotificationCenter、KVC、KVO、Delegate"></a>NotificationCenter、KVC、KVO、Delegate</h1><ul>
<li>KVO：一对多，键值观察。</li>
<li><p>KVC：键值编码，一个对象在调用setValue的时候:<br><img src="http://o9xc0bh9t.bkt.clouddn.com/15028861726463.jpg" alt=""></p>
</li>
<li><p>Delegate：发送者和接受者是直接的一对一的关系。允许一个类在某些特定时刻通知到其他类，而不需要获取那些类的指针，接受者可以改变发送者的行为。</p>
</li>
<li><p>Notification:观察者模式，通常发送者和接受者的关系是间接的多对多关系。消息的发送者告知接受者事件已经发生或者将要发送。接受者不能反过来影响发送者的行为。</p>
</li>
<li><p>区别     </p>
<ul>
<li>delegate 效率比 NSNotification 高。</li>
<li>delegate 比 Notification 更直接，需要关注返回值。</li>
<li>两个模块联系不是很紧密，就用NSNotification 传值，例如多线程间的传值。</li>
</ul>
</li>
</ul>
<h1 id="Category-和-Extention"><a href="#Category-和-Extention" class="headerlink" title="Category 和 Extention"></a>Category 和 Extention</h1><ul>
<li>类别：在没有原类 .m  文件之外给原类添加方法，但不能给原类添加成员变量，添加的成员变量不能初始化。</li>
<li>扩展：一种特殊形式的类别。在一个类的 .m 文件里声明变量和方法。可以给某个类添加私有方法和私有变量。</li>
<li>区别：<ul>
<li>扩展可以添加属性和方法，并且添加的方法是必须实现的。</li>
<li>类别可以再不知道不改变原来代码的情况下往原有类添加新的方法，只能添加，不能删除修改。</li>
<li>如果类别和原有类中的方法产生命名冲突，则类别的方法会覆盖原来的方法，即类别具有更高的优先级。</li>
</ul>
</li>
</ul>
<h1 id="潜拷贝和深拷贝"><a href="#潜拷贝和深拷贝" class="headerlink" title="潜拷贝和深拷贝"></a>潜拷贝和深拷贝</h1><ul>
<li>潜拷贝：只复制对象的指针，而不复制对象本身，对象内容有改变，则复制之后的结果也会变。</li>
<li>深拷贝：复制对象本身。</li>
</ul>
<h1 id="nil、Nil、NULL、NSNull"><a href="#nil、Nil、NULL、NSNull" class="headerlink" title="nil、Nil、NULL、NSNull"></a>nil、Nil、NULL、NSNull</h1><ul>
<li>nil：针对Objective-C中的对象使用，表示空对象。nil对象调用任何方法表示什么也不执行，也不会崩溃。</li>
<li>Nil：针对Objective-C中的类使用，标识空类（<code>Class myClass = Nil</code>）。</li>
<li>NULL：对于C语言指针使用的，表示空指针。</li>
<li>NSNull：类类型，用于标识空的占位对象，可以用来给服务端接口传空值。</li>
</ul>
<h1 id="block-weak-修饰的区别"><a href="#block-weak-修饰的区别" class="headerlink" title="block / weak 修饰的区别"></a><strong>block / </strong>weak 修饰的区别</h1><ul>
<li><code>__block</code> 在 arc 和 mrc 环境下都能用，可以修饰对象，也能修饰基本数据类型。</li>
<li><code>__weak</code> 只能用在 arc 环境下，只能修饰对象，不能修饰基本数据类型。</li>
<li><code>__block</code> 对象可以在Block 中重新赋值，<code>__weak</code> 不行。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[近几日面试有感]]></title>
      <url>http://huntermz.site/2017/07/07/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="萌生了跳槽的念头"><a href="#萌生了跳槽的念头" class="headerlink" title="萌生了跳槽的念头"></a>萌生了跳槽的念头</h1><p>从去年毕业到现在，在公司一年零两个月了，想着工资也该涨涨了。抱着试一试的态度跟老大提了，因为知道公司去年因为好多因素效益不好，心里其实没有抱多大希望。果不其然，没有同意。更戏剧的是涨薪没申请下来，却申请来了加班[此处有一个捂脸哭的表情]。于是萌生了跳槽的念头。</p>
<h1 id="开始准备"><a href="#开始准备" class="headerlink" title="开始准备"></a>开始准备</h1><p>跳槽的念头一旦燃起，便很难压制了。很快便有行动了：</p>
<ul>
<li>重新下了”拉钩” 和 “Boss直聘”，开始留意招聘信息，并将求职状态改为”在职考虑机会”。</li>
<li>找了一个很全的iOS基础知识点总结，开始复习基础知识。</li>
<li><p>整理经手的项目，更新简历。</p>
<a id="more"></a>
<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p>很快就有好几家单位主动询问，是否考虑他们公司，初步筛选后选了四家公司接受了面试。</p>
</li>
<li><p>第一家(牛刀小试)<br>   一个游戏发行公司，看中了我有游戏SDK的开发经验。公司有一百多人，环境还不错。但是在听到公司目前没有iOS，而且预计也只招一个iOS时候，已经在心里pass掉了。不是说一个人拿不动活，而且身边连个交流的人都没有，感觉很孤独啊。面完后我自认为答的还可以，但是竟然没有后续了。这就尴尬了，不过本来也没打算去，就没再想。</p>
</li>
<li><p>第二家( excuse me? )<br>一个不到20人的小公司。老板直接上，先拉着我谈理想，谈抱负，谈发展，开始觉察到好像哪里不对。一开始我以为他们也做直播呢，后来才发现原来是给别的公司做，说白了就是外包。虽然对外包公司没多大兴趣，但还是耐着性子聊。这一聊发现这尼玛哪里是招人，明明是遇到技术瓶颈了，想通过面试找解决方案呢。好嘛，你跟我绕，我也跟你绕，反正来都来了，就当练口才了。最后莫名期末的竟然直接给offer了，工资还不错。不是很懂这个套路，没接。</p>
</li>
<li><p>第三家(被虐了)<br>  又是一家做直播的公司，做的是印尼的市场。一进门就看到一个很漂亮的小姐姐在用英语打电话，声音很好听。心里在YY：恩，这家公司得重点考虑。<br>  一面一个很年轻的小伙子来面我。人虽然年轻，但是技术一点都不虚。聊了大约一个小时，话题大都围绕iOS开发，时不时插几句计算机基础或者数据结构的问题，总之聊的很投机。<br>  二面是技术总监面，他一进来我就感觉不对。有些人你只是看他就觉得这个人很牛逼，这大概就是一个人的气质吧。一开口就是数据结构，用脑子里仅存的数据结构的知识巴拉巴拉开始扯。噩梦开始了，他能找到你每句话里的漏洞，并开始追问，问到你哑口无言。这里并不是说他问你问题是为了为难你，而是看你对这个问题掌握的程度。<br>  数据结构之后问了我负责的一些模块的业务底层实现。一开始我还挺自信的，因为都是我自己做的。但是一开口就发现我所理解的底层实现和他问的完全不是一回事，整个二面都是懵逼的状态。答的很糟糕，但是信服口服，同时也清晰的认识到自己的不足。</p>
</li>
<li><p>最后一家(谢谢参与)<br>   收到Bigo的面试邀请是在周二，着实激动的难以平静。HR打电话预约面试的时候，就已经问了好多问题，也叮嘱了很多事宜。比如整个流程大概是怎么样的，需要准备哪些东西以及会考察哪些方面都告诉你。<br>   面试如约而至，准备的很仓促。Bigo因为是在YY的基础上成立，所以和YY在一个写字楼里，隔着好远就能看到 “YY.com” 的字样。进门查身份好严格，身份证+电话+面试邀请 缺一不可。进入大楼，环境真的很高大上，工作区和休闲区是分开的。面试是在休闲区进行的，控件很大，有免费的咖啡。到了前台会发一份个人信息表和面试情况考核表，还有一套笔试题。题目不难，考察iOS的基础。<br>   一面是普通员工面试，从简到深。会问到设计模式，设计一个函数并考虑线程安全的问题。会问SDWebImage的底层原理。其他的比较深的也没咋问，感觉面试官对我兴趣不是很大。完事过会儿hr过来说今天的面试到此结束，好吧，game over， tanks for your comming。。。。。</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前iOS市场有所好转，但是市场的需求不再是以牺牲性能为代价快速做出东西。而是更注重产品的架构，性能。而大部分初级开发者都停留在能做出东西这个层次。如果不能静下心来研究研究底层，未来几年的日子应该不好过。发现问题解决问题。四次面试已经将我的劣势暴露的很彻底了。接下来哪里不行补哪里就是了。</p>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随手记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[苹果内购总结]]></title>
      <url>http://huntermz.site/2017/05/15/%E8%8B%B9%E6%9E%9C%E5%86%85%E8%B4%AD%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="内购流程"><a href="#内购流程" class="headerlink" title="内购流程"></a>内购流程</h2><h3 id="在iTunes-Connect上创建和配置产品"><a href="#在iTunes-Connect上创建和配置产品" class="headerlink" title="在iTunes Connect上创建和配置产品"></a>在iTunes Connect上创建和配置产品</h3><ul>
<li>只能创建虚拟商品。</li>
<li>一个商品对应一个商品id(productIdentifier)，一旦创建成功不能修改，如果写错需删除此商品重新创建，并且此商品id作废。</li>
<li>商品分<code>消耗型</code>、<code>非消耗型</code>、<code>自动再生订阅</code> 和 <code>非自动再生订阅</code>。<ul>
<li><code>消耗型</code>： 使用完之后不可恢复。</li>
<li><code>非消耗型</code>： 永久有效，只要是同一个Apple ID 换个设备可以免费恢复。</li>
<li><code>自动再生订阅</code>： 在用户设备上也是永久可用，但是有过期时间。在订阅期内可以访问内容，快要到期时，系统会以用户的名义续订。</li>
<li><code>非自动订阅</code>：订阅内容在所有用户的设备都可用，可以恢复。系统不会自动续订<a id="more"></a>
<h3 id="获取产品信息"><a href="#获取产品信息" class="headerlink" title="获取产品信息"></a>获取产品信息</h3></li>
</ul>
</li>
<li>获取一个产品识别码列表：<ul>
<li>如果应用程序有一个固定的产品列表，可以把商品id列表保存在本地。</li>
<li>如果商品列表不需要应用程序更新就可以做改变，可以通过服务器返回。</li>
</ul>
</li>
<li><p>验证商品列表的有效性：为了确保用户看到的产品是真实可买，在显示应用的商店 UI 之前查询应用商店，确保显示的商品都是有效的。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)validateProductIdentifiers:(<span class="built_in">NSArray</span> *)productIdentifiers</div><div class="line">&#123;</div><div class="line">    <span class="built_in">SKProductsRequest</span> *productsRequest = [[<span class="built_in">SKProductsRequest</span> alloc]</div><div class="line">       	initWithProductIdentifiers:[<span class="built_in">NSSet</span> setWithArray:productIdentifiers]];</div><div class="line">    productsRequest.delegate = <span class="keyword">self</span>;</div><div class="line">    [productsRequest start];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// SKProductsRequestDelegate protocol method</span></div><div class="line">- (<span class="keyword">void</span>)productsRequest:(<span class="built_in">SKProductsRequest</span> *)request</div><div class="line">    didReceiveResponse:(<span class="built_in">SKProductsResponse</span> *)response</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span>.products = response.products;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *invalidIdentifier <span class="keyword">in</span> response.invalidProductIdentifiers) &#123;</div><div class="line">         <span class="comment">// Handle any invalid product identifiers.</span></div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> displayStoreUI]; <span class="comment">// Custom method</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>呈现应用商店UI</p>
<ul>
<li>只在用户可以支付时显示一个商店。 调用 <code>SKPaymentQueue</code> 类 的 <code>canMakePayments</code> 方法来确认用户是否可以支付。 如果用户不能支付(比如，父母限制), 可以显示 UI 表明一个商店不可用，或者完全忽略商店部分。</li>
<li>使用应用商店返回的语言环境(locale)和货币清楚地显示价格，不要尝试在你的 UI 中把价格转换为一个不同的货币。</li>
</ul>
</li>
<li>测试购买<ul>
<li>在iTunes Connect上添加测试账号，测试账号的邮箱不需要真实存在。</li>
<li>不要用你的测试用户账号登陆产品环境，否则测试用户账号将无效不能再使用。</li>
</ul>
</li>
</ul>
<h3 id="支付请求"><a href="#支付请求" class="headerlink" title="支付请求"></a>支付请求</h3><ul>
<li><p>创建支付请求<br>  当用户选择了一个要买的产品后，使用一个产品对象创建一个支付请求，并根据需要设置好购买数量。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">SKProduct</span> *product = &lt;<span class="meta"># Product returned by a products request #&gt;;</span></div><div class="line"> <span class="built_in">SKMutablePayment</span> *payment = [<span class="built_in">SKMutablePayment</span> paymentWithProduct:product];</div><div class="line"> payment.quantity = <span class="number">2</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>检测异常订单<br>App Store 用一个 <code>异常活动检测引擎</code> 来检测异常的用户行为，应用程序可以提供额外信息来提高该殷勤的性能。具体就是提供一个和用户想关联的 <code>账号</code>，在发起支付请求时赋值给 <code>applicationUsername</code>，而且要保证这个 <code>账号</code>，是一个不透明的识别码，苹果推荐使用 <code>单向散列方式</code> 填写。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">// Custom method to calculate the SHA-256 hash using Common Crypto</span></div><div class="line">- (<span class="built_in">NSString</span> *)hashedValueForAccountName:(<span class="built_in">NSString</span>*)userAccountName</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> HASH_SIZE = <span class="number">32</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> hashedChars[HASH_SIZE];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *accountName = [userAccountName UTF8String];</div><div class="line">    size_t accountNameLen = strlen(accountName);</div><div class="line"></div><div class="line">    <span class="comment">// Confirm that the length of the user name is small enough</span></div><div class="line">    <span class="comment">// to be recast when calling the hash function.</span></div><div class="line">    <span class="keyword">if</span> (accountNameLen &gt; <span class="built_in">UINT32_MAX</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Account name too long to hash: %@"</span>, userAccountName);</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">    CC_SHA256(accountName, (CC_LONG)accountNameLen, hashedChars);</div><div class="line"></div><div class="line">    <span class="comment">// Convert the array of bytes into a string showing its hex representation.</span></div><div class="line">    <span class="built_in">NSMutableString</span> *userAccountHash = [[<span class="built_in">NSMutableString</span> alloc] init];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HASH_SIZE; i++) &#123;</div><div class="line">        <span class="comment">// Add a dash every four bytes, for readability.</span></div><div class="line">        <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i%<span class="number">4</span> == <span class="number">0</span>) &#123;</div><div class="line">            [userAccountHash appendString:<span class="string">@"-"</span>];</div><div class="line">        &#125;</div><div class="line">        [userAccountHash appendFormat:<span class="string">@"%02x"</span>, hashedChars[i]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> userAccountHash;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>&gt; 注意:
&gt; `applicationUsername` 并不可靠。正常情况下在创建支付请求是将 `账号` 传给苹果，支付完成后在收据里也可以获取该值。但在使用过程偶现收据中的`applicationUsername` 为空。
</code></pre><ul>
<li><p>提交支付请求</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">SKPaymentQueue</span> defaultQueue] addPayment:payment];</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="等待并处理支付结果"><a href="#等待并处理支付结果" class="headerlink" title="等待并处理支付结果"></a>等待并处理支付结果</h3><p>当交易状态改变时，比如一个支付请求成功了，Store Kit 会调用 交易队列观察者。因此需要指定一个类作为观察者。大部分情况需要创建一个单独的类来处理改观察者逻辑，少数情况下可以在应用委托中处理所有的商店 Kit 逻辑，包括观察交易队列。不管哪种情况，观察者必须遵循 <code>SKPaymentTransactionObserver</code>协议，然后实现这个方法：</p>
<pre><code><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)paymentQueue:(<span class="built_in">SKPaymentQueue</span> *)queue updatedTransactions:(<span class="built_in">NSArray</span> *)transactions</div><div class="line">&#123;</div><div class="line">   	<span class="keyword">for</span> (<span class="built_in">SKPaymentTransaction</span> *transaction <span class="keyword">in</span> transactions) &#123;</div><div class="line">       	<span class="keyword">switch</span> (transaction.transactionState) &#123;</div><div class="line">           	<span class="comment">// Call the appropriate custom method.</span></div><div class="line">           	<span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStatePurchased</span>:</div><div class="line">               [<span class="keyword">self</span> completeTransaction:transaction];</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           	<span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateFailed</span>:</div><div class="line">               [<span class="keyword">self</span> failedTransaction:transaction];</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           	<span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateRestored</span>:</div><div class="line">               	[<span class="keyword">self</span> restoreTransaction:transaction];</div><div class="line">           	<span class="keyword">default</span>:</div><div class="line">              	 <span class="keyword">break</span>;</div><div class="line">      	 	&#125;</div><div class="line"> 	  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="验证收据并发货"><a href="#验证收据并发货" class="headerlink" title="验证收据并发货"></a>验证收据并发货</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURL</span> *receiptURL = [[<span class="built_in">NSBundle</span> mainBundle] appStoreReceiptURL]</div><div class="line"></div><div class="line"><span class="comment">// 从沙盒中获取到购买凭据</span></div><div class="line"><span class="built_in">NSData</span> *receiptData = [<span class="built_in">NSData</span> dataWithContentsOfURL:receiptURL];</div><div class="line"></div><div class="line"><span class="comment">// 发送收据到服务器</span></div><div class="line">[<span class="keyword">self</span> verifyReceiptWithOrderId:transaction.payment.applicationUsername</div><div class="line">                   receiptData:receiptData transaction:transaction</div><div class="line">                       success:successBlock</div><div class="line">                       failure:failureBlock];</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[拔牙记]]></title>
      <url>http://huntermz.site/2017/04/29/%E6%8B%94%E7%89%99%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="智齿"><a href="#智齿" class="headerlink" title="智齿"></a>智齿</h2><p>智齿——人类进化还不够彻底的一个重要体现，大约有75%的人会长智齿，一般在16～25岁间萌出。通常情况下应该有上下左右对称的4颗牙，有的少于4颗甚至没有，极少数人会多于4颗。我就长了4颗，其中有一个横着长的阻生牙。这次拔了右边的两个，过段时间还得再拔一次。</p>
<a id="more"></a>
<h2 id="拔还是不拔"><a href="#拔还是不拔" class="headerlink" title="拔还是不拔"></a>拔还是不拔</h2><p>我的回答是拔，不仅要拔，还要早点拔。建议大家有空去拍个牙片，如果牙片显示有智齿，那就趁早拔，不要有反正又不疼不用拔的这种侥幸心理。如果发现是<a href="http://baike.baidu.com/link?url=qu3FriwcazMtKlfgQEhE77KflGOPQNITcNRPwIJZaEE8asZcZevSfNx9XEOicn6mX4Gp9pcXg-3GXzzp0NFI6dQdvY9JI2bEEMRKzMNSMAuhd1EmjpC1OzRM5QCGWPHt" target="_blank" rel="external">阻生牙</a>，那一定要拔掉。这东西就像一个炸弹，埋在你的牙槽里。一旦爆发，带来的疼痛真是不可用语言描述，手动捂脸。我很早之前就发现长出了智齿，但是因为当时不怎么疼就没管。前段时间朋友送了几包锅巴，嘴馋多吃了点，然后就发炎了，发炎了。。。</p>
<h2 id="去哪里拔-amp-价格"><a href="#去哪里拔-amp-价格" class="headerlink" title="去哪里拔 &amp; 价格"></a>去哪里拔 &amp; 价格</h2><p>去正规医院拔。不要贪小便宜或者怕麻烦去不正规或者条件差的地方拔。不同医院价格会有出入，我之前听朋友说省口腔是200多，我最后就近去了中山三院是400块，当然如果是在定点医院的话，医保可以报销一部分，就便宜很多了。</p>
<h2 id="拔牙前后注意什么"><a href="#拔牙前后注意什么" class="headerlink" title="拔牙前后注意什么"></a>拔牙前后注意什么</h2><h3 id="预约"><a href="#预约" class="headerlink" title="预约"></a>预约</h3><ul>
<li>拔牙前最好先预约好，现在大部分医院都可以在微信或者支付宝的服务号上预约挂号，比如”中国电信114挂号”、”就医160”等公众号，建议提前一周预约。</li>
<li>如果来不及预约，或者预约不到，就近选择一家三甲医院吧。一般口腔科的号比较紧张，早上起早点去排队吧。我是7点起床去挂号，拔完牙都12点了。。。。</li>
</ul>
<h3 id="拔牙当天"><a href="#拔牙当天" class="headerlink" title="拔牙当天"></a>拔牙当天</h3><ul>
<li>如果你是早上去拔牙，一定要吃早餐，而且要比平时多吃点。</li>
<li>拔牙要打麻药，不吃早餐不给拔。我那天就中招了，怕吃完东西医生拔牙的时候拔出菜叶啊肉渣神马的就没吃早餐，临时去吃点东西回来又得重新排队。</li>
<li>拔完牙两个小时内不能进食。一般早上去拔，拔完刚好到午饭时间，所以早上不多吃点我怕你熬不住。。。。</li>
<li>打了麻药后半边脸是没有知觉的，所以拔牙的时候不疼，在牙齿被拔下的瞬间感觉还蛮爽的[滑稽]</li>
<li>拔牙的时候一定要把嘴巴张大点。能张多大就张多大。这样医生会看的清楚，也容易使上劲儿。奈何我天生嘴小，用钳子拔不下来，于是上了锤子。。。。如果来之前我又看到那个锤子的话，说什么也不去拔了。你可以脑补下，一根铁杵放在牙上，然后用一把铁锤砸，虽然你的牙没感觉，但是头被震的嗡嗡响啊，哭笑。。。</li>
</ul>
<h3 id="拔牙后"><a href="#拔牙后" class="headerlink" title="拔牙后"></a>拔牙后</h3><ul>
<li>拔完牙医生会嘱咐你咬住医用棉一个小时。你就照他说的做好吗？别问为什么了，我不想说。。。。。</li>
<li>麻药会持续两个小时。这段时间疼痛会随着麻药的失效递增，然后在麻药失效的半个小时到达顶峰。</li>
<li>一定要在麻药失效前找个安静的光线暗的房间，一个人待在里面。因为拔牙的时候难免会伤到神经，如果拔牙时间较长或者用了锤子，那几乎是必然伤到神经的。所以，在麻药失效的办个小时内，你会经历偏头疼，严重的还会引起发烧！！！对，是头疼，不是牙疼。那种疼，真是让人分分钟钟想杀人，如果这时候有个人在面前吵吵，会发生什么请自己脑补。</li>
<li>解决办法是在拔牙后一个半小时左右吃块止疼药，然后把窗帘拉上，躺在床上，强迫自己静下来，熬过半个小时就没那么疼了。</li>
<li>拔牙第二天也有一定几率会出现偏头疼或者牙疼。</li>
<li>一般当天不要刷牙，第二天就可以正常刷牙了。</li>
<li>拔完牙两天内，你就老老实实的喝粥，喝粥，喝粥，千万别作死啊。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>早拔早幸福。</p>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随手记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手机丢失后的一些想法]]></title>
      <url>http://huntermz.site/2017/04/18/%E6%89%8B%E6%9C%BA%E8%A2%AB%E5%81%B7%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>那天下了点雨，挺冷的。早上出门穿的太薄，急着上车，人很多，需要侧着身才能挤上去，我上车的时候是右侧兜(装手机)朝外，，一手拿雨伞，一手抓扶手。上车大约一分钟后习惯性摸手机的时候已经找不到了，让旁边的人打电话提示已关机。。。。。</p>
<a id="more"></a>
<h2 id="接下来半个小时内我做了什么"><a href="#接下来半个小时内我做了什么" class="headerlink" title="接下来半个小时内我做了什么"></a>接下来半个小时内我做了什么</h2><ol>
<li>找到一个水果店，说服老板借我手机打电话给运营商挂失电话卡。<ul>
<li>当时营业厅已经下班了，如果等到第二天再去办理，估计我的好多账号都被以验证码的方式修改了。</li>
<li>需要提供你的手机号 + 服务密码。</li>
</ul>
</li>
<li>打电话给支付宝冻结账号。</li>
<li>登录iCloud.com 开启丢失模式(仅限iPhone)<ul>
<li>如果开启了两步验证 需要通过你的可信任移动设备或者电话发送验证码才可以登录。如果两种方式都不能使用，那就要用到一个东西”恢复密钥”，你可能有点印象，在你开启两步验证的时候苹果会提示你妥善保存”恢复密钥”。如果你没在意，那就只能等你的手机卡补办回来了再登录了。。。</li>
</ul>
</li>
<li><p>登录到iCloud后，开启丢失模式。</p>
<ul>
<li><p>选择查找我的iPhone<br><img src="http://o9xc0bh9t.bkt.clouddn.com/14924863159093.jpg" alt=""></p>
</li>
<li><p>选择 “丢失模式” or “抹除数据”<br><img src="http://o9xc0bh9t.bkt.clouddn.com/14924864306087.jpg" alt=""></p>
<p>这里我引用下威锋网友的回答</p>
<blockquote>
<p>1、关于抹掉iPhone，手机没有越狱，只要之前你在设置里打开了“查找我的iPhone”，抹掉iPhone后手机所有的资料全部抹除得干干净净，iCloud不能再定位你的手机（不管手机有没有离线），但必须要用原来的apple id激活手机后才可以使用。在手机激活页面会显示你的留言和你留下的电话号码。<br>2、关于抹掉iPhone，手机已经越狱，只要之前你在设置里打开了“查找我的iphone”，抹掉iPhone后手机无限菊花，无法重启最后只好DFU刷机，iCloud不能再定位你的手机（不管手机有没有离线）,最后还是要用原来的Apple Id激活手机后才可以使用。在iTunes激活页面会显示你的留言和你留下的电话号码。<br>3、关于丢失模式，手机没有越狱，并不会删除任何资料，会在手机锁定屏幕上显示你的留言和你留下的电话号码，可以用你的手机直接拨打你留下的电话，可以随时上网登录iCloud查看当前手机的位置（如果手机没离线的话）。这里要说明的是，捡到手机的人可以慢慢试你的锁屏密码，如果密码试出来了！！！他就可以进到手机里面去，并且是同时立即解除丢失模式，手机恢复正常。手机里面的资料什么照片联系人等当然也看得一清二楚了！看来锁屏密码还是要设定为复杂密码比较妥当。<br>4、关于丢失模式，手机已经越狱，同上。与第3点没有越狱的手机情况相同。</p>
<p>综上:</p>
<ul>
<li>开启丢失模式。不会抹除手机里的内容，可以在手机联网的时候定位到手机，可以显示你的预留手机号码。但是如果你的锁屏密码太简单，那只要对方解开屏幕锁就能接触你大部分的资料，也是很危险的。</li>
<li>抹除数据。会在手机联网的时候抹除你手机上的所有内容。但是你也没法定位手机了，也就是说这个手机以后你是找不会来了，但是对方也不能用，除非他知道你的Apple Id和密码。</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p>总结<br>  谁都不能保证自己永远不会丢手机，但是我们可以未雨绸缪，做好防护措施，这样万一手机丢失了也能快速应对，减少损失。例如：</p>
<ul>
<li>为你的手机卡设置服务密码并牢记。</li>
<li>如果你是iPhone用户，开启两步验证并保存好恢复密钥。</li>
<li>管理你的账号密码，不要同一个密码到处用。</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[静态库 & 项目依赖]]></title>
      <url>http://huntermz.site/2016/11/25/%E9%9D%99%E6%80%81%E5%BA%93&amp;%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/</url>
      <content type="html"><![CDATA[<h2 id="1-制作静态库"><a href="#1-制作静态库" class="headerlink" title="1. 制作静态库"></a>1. 制作静态库</h2><ul>
<li><p>新建一个 <code>WorkSpace</code> </p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799821305845.jpg" alt=""></p>
</li>
<li><p>Xcode -&gt; File -&gt; New -&gt;Project，选择 <code>Cocoa Touch Static Library</code></p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799822604174.jpg" alt=""></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>保存到 <code>Demo.xworkspace</code></p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799823010439.jpg" alt=""></p>
</li>
<li><p>将要抽取的文件拖入 <code>MyLib</code>，选中Target <code>MyLib</code> -&gt; <code>Build Phases</code> -&gt; 点击 <code>+</code> 添加 <code>New Header Phase</code></p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799830026335.jpg" alt=""></p>
</li>
<li><p>将 <code>MyLib.h</code> 拖到 Public 目录下</p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14800430508220.jpg" alt=""></p>
</li>
<li><p>选中 Project <code>MyLib</code>， 选中 <code>Build Setting</code> 设置 最低版本版本，</p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799833021431.jpg" alt=""></p>
</li>
</ul>
<p>最后，编译静态库，我们就完成了第一步 ———— 制作静态库。</p>
<h2 id="2-使用静态库"><a href="#2-使用静态库" class="headerlink" title="2. 使用静态库"></a>2. 使用静态库</h2><p>有了静态库后我们看下如何在项目中使用静态库。</p>
<ul>
<li><p>创建工程 <code>MyProject</code>，并保存到 <code>Demo.xworkspace</code></p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799831246704.jpg" alt=""></p>
</li>
</ul>
<p>目录结构如图所示</p>
<p><img src="http://o9xc0bh9t.bkt.clouddn.com/14799832018502.jpg" alt=""></p>
<ul>
<li><p>在 <code>MyProject</code> 中引用 <code>MyLib</code>     </p>
<ul>
<li><p>选中 <code>MyProject</code>，Add <code>MyLib.xcodeproj</code></p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799833916582.jpg" alt=""></p>
</li>
<li><p>完成之后如图所示</p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799834316223.jpg" alt=""></p>
</li>
</ul>
</li>
<li><p>导入静态库，添加依赖，不多说，看图</p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799836057634.jpg" alt=""></p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799836421011.jpg" alt=""></p>
</li>
<li><p>对 <code>MyProject</code> 进行设置<br>  这时候我们如果直接使用静态库，会报找不到文件的错误，所以要对工程进行设置</p>
<ul>
<li><p>选中 Target <code>MyProject</code> -&gt; <code>Build Settings</code> -&gt; 搜索’header search’，双击 <code>Header Search Paths</code></p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799837547604.jpg" alt=""></p>
</li>
<li><p>点击 <code>+</code> 做如下添加</p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799849327050.jpg" alt=""></p>
<ul>
<li>选中 Target <code>MyProject</code> -&gt; <code>Build Settings</code> -&gt; 搜索’other link’，双击 <code>Other Linker Flags</code>，做如下添加：</li>
</ul>
<p><img src="http://o9xc0bh9t.bkt.clouddn.com/14799849541889.jpg" alt=""></p>
<blockquote>
<p>注：做这一步主要是因为如果你的静态库里面包含分类的话会报找不到头文件的错误。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>在要使用的地方导入头文件，然后就可以访问静态库中的方法了</p>
<p>  <img src="http://o9xc0bh9t.bkt.clouddn.com/14799849906090.jpg" alt=""></p>
<h2 id="3-可能遇到的错误"><a href="#3-可能遇到的错误" class="headerlink" title="3. 可能遇到的错误"></a>3. 可能遇到的错误</h2></li>
<li>MyLib.h file not find<br><img src="http://o9xc0bh9t.bkt.clouddn.com/14800460814332.jpg" alt=""></li>
</ul>
<p>出现这种情况，请先检查这一步有没有正确设置：</p>
<p><img src="http://o9xc0bh9t.bkt.clouddn.com/14799849327050.jpg" alt=""></p>
<p>有时候你明明设置好了还是报错，但是项目竟然可以运行，我就遇到了。。。。这时候就是Xcode缓存的问题了，需要做如下处理</p>
<ul>
<li><p>打开终端，确保在根目录下 然后输入 ：<br><img src="http://o9xc0bh9t.bkt.clouddn.com/14800463961614.jpg" alt=""></p>
</li>
<li><p>将目录下的所有文件删除</p>
</li>
</ul>
<p><img src="http://o9xc0bh9t.bkt.clouddn.com/14800464686927.jpg" alt=""></p>
<p>然后重启Xcode，再次编译，如果还是报错，建议重走 <a href="#使用静态库">使用静态库</a></p>
]]></content>
      
        <categories>
            
            <category> iOS开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 开发中遇到的坑]]></title>
      <url>http://huntermz.site/2016/09/20/iOS%20%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h1 id="记录-iOS-开发中遇到的坑，持续更新…"><a href="#记录-iOS-开发中遇到的坑，持续更新…" class="headerlink" title="记录 iOS 开发中遇到的坑，持续更新….."></a>记录 iOS 开发中遇到的坑，持续更新…..</h1><h2 id="iOS10-权限描述-crash"><a href="#iOS10-权限描述-crash" class="headerlink" title="iOS10 权限描述 crash"></a>iOS10 权限描述 crash</h2><p><strong>问题描述：</strong>当使用 iOS10 运行项目会 crash，报错信息如下：</p>
<font color="red"><strong>This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app’s Info.plist must contain an NSContactsUsageDescription key with a string value explaining to the user how the app uses this data.</strong></font>

<p><strong>原因分析：</strong></p>
<p>在 iOS10 中，如果有访问系统资源，例如：照相机、相册、麦克风、通讯录等，需要在 info.plist 文件中添加描述字段</p>
<p><strong>解决方案：</strong></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 使用照相机</div><div class="line">&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;    </div><div class="line">	&lt;string&gt;此应用会访问您的相机&lt;/string&gt;</div><div class="line"></div><div class="line">// 使用相册</div><div class="line">&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;</div><div class="line">    &lt;string&gt;此应用会访问您的相册&lt;/string&gt;</div><div class="line">// 使用通讯录</div><div class="line">&lt;key&gt;NSContactsUsageDescription&lt;/key&gt;    </div><div class="line">	&lt;string&gt;此应用会访问您的通讯录&lt;/string&gt;</div><div class="line"></div><div class="line">// 使用麦克风</div><div class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;    </div><div class="line">	&lt;string&gt;此应用会访问您的麦克风&lt;/string&gt;</div></pre></td></tr></table></figure>
<h2 id="无权限访问此文件"><a href="#无权限访问此文件" class="headerlink" title="无权限访问此文件"></a>无权限访问此文件</h2><p><strong>问题描述：</strong><br>   当修改项目中的 plist 文件后运行项目，会出现以下错误：</p>
<p><img src="https://o9xwn216o.qnssl.com/blog-img/1473670178405.png" alt=""></p>
<p><strong>原因分析</strong><br>猜想可能是缓存内的文件和当前编译文件冲突</p>
<p><strong>解决办法</strong></p>
<ol>
<li>cmd + shift + k 清空 -—&gt; cmd + r</li>
<li>方法一有时候会不管用，如果不管用，就 Project–&gt;Build Setting中 修改这一项，变成Default Compiler（Apple LLVM 6.0） </li>
</ol>
<p><img src="https://o9xwn216o.qnssl.com/blog-img/1473670782316.png" alt=""></p>
<h2 id="Xcode编译时候出现各种诡异的问题"><a href="#Xcode编译时候出现各种诡异的问题" class="headerlink" title="Xcode编译时候出现各种诡异的问题"></a>Xcode编译时候出现各种诡异的问题</h2><p>请到这个<code>/Users/用户名/Library/Developer/Xcode/DerivedData</code>目录下清理下Xcode缓存,我的问题是，编译时候报文件找不到，但是可以跑起来，<code>cmd + shift + c</code>了好几次都不行，然后到缓存目录，全部清理掉，就可以了。。。</p>
<h2 id="横屏状态栏不显示"><a href="#横屏状态栏不显示" class="headerlink" title="横屏状态栏不显示"></a>横屏状态栏不显示</h2><p>横屏后状态栏不显示了,这是因为iOS系统(好像是iOS8之后)在视图横屏的时候默认把状态栏隐藏掉了，解决方案：</p>
<ol>
<li><p>在plist文件中将 View controller-based status bar appearance 设置为NO</p>
</li>
<li><p>在application:didFinishLaunchingWithOptions:中添加下面代码</p>
</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarHidden:<span class="literal">YES</span> withAnimation:<span class="built_in">UIStatusBarAnimationNone</span>];</div><div class="line"></div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarHidden:<span class="literal">NO</span> withAnimation:<span class="built_in">UIStatusBarAnimationNone</span>];</div></pre></td></tr></table></figure>
<h2 id="手机平放横屏竖屏判断"><a href="#手机平放横屏竖屏判断" class="headerlink" title="手机平放横屏竖屏判断"></a>手机平放横屏竖屏判断</h2><p>iOS 可以检测屏幕方向，如下枚举</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIDeviceOrientationUnknown</span>            <span class="comment">// 方向未知    UIDeviceOrientationPortrait           // Device oriented vertically, home button on the bottom</span></div><div class="line"></div><div class="line"><span class="built_in">UIDeviceOrientationPortraitUpsideDown</span> <span class="comment">// Device oriented vertically, home button on the top</span></div><div class="line"></div><div class="line"><span class="built_in">UIDeviceOrientationLandscapeLeft</span>      <span class="comment">// Device oriented horizontally, home button on the right</span></div><div class="line"></div><div class="line"><span class="built_in">UIDeviceOrientationLandscapeRight</span>     <span class="comment">// Device oriented horizontally, home button on the left</span></div><div class="line"></div><div class="line"><span class="built_in">UIDeviceOrientationFaceUp</span>             <span class="comment">// Device oriented flat, face up</span></div><div class="line"></div><div class="line"><span class="built_in">UIDeviceOrientationFaceDown</span></div></pre></td></tr></table></figure>
<p>但是当手机平放时就无法判断是横屏还是竖屏了。准确的说是不知道从<code>横屏进入平放</code>还是<code>从竖屏进入平放</code>。假设你的横屏和竖屏 UI 变化比较大，那么你的设备    <code>从横屏变为平放</code> 和 <code>从竖屏变为平放</code>就尤为重要了。</p>
<p>终于找到一种方法，可以解决问题了….</p>
<p>通过判断 statusBarOrientaion 的方向。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIInterfaceOrientationUnknown</span>            = <span class="built_in">UIDeviceOrientationUnknown</span>,</div><div class="line"> </div><div class="line"><span class="built_in">UIInterfaceOrientationPortrait</span>           = <span class="built_in">UIDeviceOrientationPortrait</span>,</div><div class="line"></div><div class="line"><span class="built_in">UIInterfaceOrientationPortraitUpsideDown</span> = **<span class="built_in">UIDeviceOrientationPortraitUpsideDown</span>,</div><div class="line">    </div><div class="line"><span class="built_in">UIInterfaceOrientationLandscapeLeft</span>      = <span class="built_in">UIDeviceOrientationLandscapeRight</span>,</div><div class="line"></div><div class="line"><span class="built_in">UIInterfaceOrientationLandscapeRight</span>     = <span class="built_in">UIDeviceOrientationLandscapeLeft</span></div></pre></td></tr></table></figure>
<h2 id="监听屏幕旋转"><a href="#监听屏幕旋转" class="headerlink" title="监听屏幕旋转"></a>监听屏幕旋转</h2><p>开放发总会遇到需要根据设备旋转来做屏幕适配。我相信绝大部分开发者都去监听了 <code>UIDeviceOrientationDidChangeNotification</code> 这个通知，我也是。但是有一些问题经常出现。当设备旋转时得到你的方向太多了，看代码：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIDeviceOrientation</span>) &#123;</div><div class="line">    <span class="built_in">UIDeviceOrientationUnknown</span>,</div><div class="line">    <span class="built_in">UIDeviceOrientationPortrait</span>,            <span class="comment">// Device oriented vertically, home button on the bottom</span></div><div class="line">    <span class="built_in">UIDeviceOrientationPortraitUpsideDown</span>,  <span class="comment">// Device oriented vertically, home button on the top</span></div><div class="line">    <span class="built_in">UIDeviceOrientationLandscapeLeft</span>,       <span class="comment">// Device oriented horizontally, home button on the right</span></div><div class="line">    <span class="built_in">UIDeviceOrientationLandscapeRight</span>,      <span class="comment">// Device oriented horizontally, home button on the left</span></div><div class="line">    <span class="built_in">UIDeviceOrientationFaceUp</span>,              <span class="comment">// Device oriented flat, face up</span></div><div class="line">    <span class="built_in">UIDeviceOrientationFaceDown</span>             <span class="comment">// Device oriented flat, face down</span></div><div class="line">&#125; __TVOS_PROHIBITED;</div></pre></td></tr></table></figure>
<p>就是 <code>UIDeviceOrientationUnknown</code> 和 <code>UIDeviceOrientationFaceUp</code> 经常捣乱，导致判断不准。</p>
<p>后来发现还有一个通知 <code>UIApplicationDidChangeStatusBarFrameNotification</code>，系统只会在四种情况下发这个通知：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIDeviceOrientationPortrait</span>  </div><div class="line"><span class="built_in">UIDeviceOrientationPortraitUpsideDown</span>  </div><div class="line"><span class="built_in">UIDeviceOrientationLandscapeLeft</span>  </div><div class="line"><span class="built_in">UIDeviceOrientationLandscapeRight</span></div></pre></td></tr></table></figure>
<p>完美解觉问题</p>
<h2 id="判断当前控制器是-push-进来的还是-present-进来"><a href="#判断当前控制器是-push-进来的还是-present-进来" class="headerlink" title="判断当前控制器是 push 进来的还是 present 进来"></a>判断当前控制器是 push 进来的还是 present 进来</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.navigationController.viewControllers.count &gt; <span class="number">1</span>) &#123;</div><div class="line">	<span class="comment">// push </span></div><div class="line">	[<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">// present</span></div><div class="line">	[<span class="keyword">self</span> dismissViewControllerAnimated:[<span class="built_in">NSUserDefaults</span> standardUserDefaults].userAnimated completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="审核"><a href="#审核" class="headerlink" title="审核"></a>审核</h2><h3 id="Missing-Push-Notification-Entitlement"><a href="#Missing-Push-Notification-Entitlement" class="headerlink" title="Missing Push Notification Entitlement"></a>Missing Push Notification Entitlement</h3><blockquote>
<p>Missing Push Notification Entitlement - Your app includes an API for Apple’s Push Notification service, but the aps-environment entitlement is missing from the app’s signature. To resolve this, make sure your App ID is enabled for push notification in the Provisioning Portal. Then, sign your app with a distribution provisioning profile that <code>includes the aps-environment entitlement</code>. This will create the correct signature, and you can resubmit your app. See “Provisioning and Development” in the Local and Push Notification Programming Guide for more information. If your app does not use the Apple Push Notification service, no action is required. You may remove the API from future submissions to stop this warning. If you use a third-party framework, you may need to contact the developer for information on removing the API.</p>
</blockquote>
<p>Xcode 7以后的坑，解决办法：</p>
<p><img src="http://o9xc0bh9t.bkt.clouddn.com/14834937846063.jpg" alt=""></p>
<h3 id="内购商品超过99-99美元被拒绝"><a href="#内购商品超过99-99美元被拒绝" class="headerlink" title="内购商品超过99.99美元被拒绝"></a>内购商品超过99.99美元被拒绝</h3><p>iTunesConnect上允许你建立超过99.99美元的消耗型商品，但是审核的时候默认是不允许超过99.99美元的消耗型商品。</p>
<h2 id="IDFA"><a href="#IDFA" class="headerlink" title="IDFA"></a>IDFA</h2><p>iOS开发中，我们经常需要获取设备的唯一表示符。以前可以通过获取UDID来作为设备的唯一标识。但是2012年5月1日后，苹果开始禁止应用获取设备的UDID。那只能通过获取IDFA来识别设备了。</p>
<p><strong>问题描述：</strong><br>    使用以下代码获取设备的IDFA</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];</div></pre></td></tr></table></figure>
<p>在运行阶段没有任何问题，但是当把应用传到TestFlight进行测试的时候发现，每次杀掉进程重新启动应用获取到的IDFA都是不一样的。当应用通过审核，上传到App Store时，又恢复正常。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span> *)deleteEvenNumberWithArray:(<span class="built_in">NSArray</span> *)array &#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *tempMutableArray = [<span class="built_in">NSMutableArray</span> arrayWithArray:array];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempMutableArray.count; i++) &#123;</div><div class="line">        <span class="built_in">NSInteger</span> tempInteger = [tempMutableArray[i] integerValue];</div><div class="line">        <span class="keyword">if</span> (tempInteger % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            [tempMutableArray removeObjectAtIndex:i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tempMutableArray.copy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="button-相应事件"><a href="#button-相应事件" class="headerlink" title="button 相应事件"></a>button 相应事件</h2><p>在UIImageView 上添加一个 Button ， Button 不能相应事件。设置 <code>button.userInteractionEnabled = YES</code> 没用，必须设置<code>UIImageView.userInteractionEnabled = YES</code>，才可以。</p>
]]></content>
      
        <categories>
            
            <category> iOS开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift 操作符自查笔记]]></title>
      <url>http://huntermz.site/2016/09/02/RxSwfit%20%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="RxSwift-学习笔记"><a href="#RxSwift-学习笔记" class="headerlink" title="RxSwift 学习笔记"></a>RxSwift 学习笔记</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://github.com/HunterMz/RxSwiftDemo" target="_blank" rel="external">项目Git链接</a><br>在 Rx 的世界中，最根本的部分是 <code>观察者模式（Observer pattern）</code> 和 <code>迭代器模式（Iterator pattern）</code> 的结合。这两者是相互作用的，在两种情况下的计算都是从生产者中取出的值。对于迭代器模式，只要他们是可用的，我们就可以获取值;对于观察者模式，我们是在生产者给所有具体的观察者发出通知后，从中获取数据去处理值。</p>
<p><strong>观察者 + 迭代器 + 推送 = 可观测的（Observable）实体</strong></p>
<p>RxSwift核心概念就是一个观察者(Observer)订阅一个可观察序列(Observable)。观察者对 Observable 发射的数据或数据序列作出响应。可观察序列分为三种：</p>
<pre><code>* `.Next`: 序列的下一个元素
 * `.Complete`: 表示事件序列的完结。
* `.Error`: 同样表示完结，但是代表异常导致的完结。
</code></pre><p><strong>序列的冷热问题：</strong></p>
<pre><code>* 冷：只有当有观察者订阅这个序列时，序列才发射值。可以保证即使有订阅者中途加入也可以收到完整的事件序列。
* 热：序列创建时就开始发射值。这样如果后面有订阅者来的时候，就可能会错过一些事件。
</code></pre><a id="more"></a>
<h3 id="创建一个序列有哪些方式："><a href="#创建一个序列有哪些方式：" class="headerlink" title="创建一个序列有哪些方式："></a>创建一个序列有哪些方式：</h3><ul>
<li>asObservable 返回一个序列</li>
<li>create 使用 Swift 闭包的方式创建序列</li>
<li>deferred 只有在有观察者订阅时，才去创建序列</li>
<li>empty 创建一个空的序列，只发射一个 .Completed</li>
<li>error 创建一个发射 error 终止的序列</li>
<li>toObservable 使用 SequenceType 创建序列</li>
<li>interval 创建一个每隔一段时间就发射的递增序列</li>
<li>never 不创建序列，也不发送通知</li>
<li>just 只创建包含一个元素的序列。换言之，只发送一个值和 .Completed</li>
<li>of 通过一组元素创建一个序列</li>
<li>range 创建一个有范围的递增序列</li>
<li>repeatElement 创建一个发射重复值的序列</li>
<li>timer 创建一个带延迟的序列</li>
</ul>
<h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p><code>empty</code> 是一个空的序列，它只发送 <code>.Completed</code> 消息。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"empty"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> emptySequence: <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt; = empty()</div><div class="line">    <span class="keyword">let</span> subscription = emptySequence</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p><code>never</code> 是没有任何元素、也不会发送任何事件的空序列。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"never"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> neverSequence: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = never()</div><div class="line">    <span class="keyword">let</span> subscription = neverSequence</div><div class="line">        .subscribe &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"This block is never called."</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="just"><a href="#just" class="headerlink" title="just"></a>just</h3><p><code>just</code> 是只包含一个元素的序列，它会先发送 <code>.Next(value)</code> ，然后发送 <code>.Completed</code> 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"just"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> singleElementSequence = just(<span class="number">32</span>)</div><div class="line">    <span class="keyword">let</span> subscription = singleElementSequence</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- just example ---</div><div class="line"><span class="type">Next</span>(<span class="number">32</span>)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="of"><a href="#of" class="headerlink" title="of"></a>of</h3><p><code>of</code> 可以把一系列元素转换成事件序列。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"of"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceOfElements<span class="comment">/* : Observable&lt;Int&gt; */</span> = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">let</span> subscription = sequenceOfElements</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- of example ---</div><div class="line"><span class="type">Next</span>(<span class="number">0</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">1</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">2</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">3</span>)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><p>from 是通过 asObservable() 方法把 Swift 中的序列 (SequenceType) 转换成事件序列。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"from"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceFromArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].asObservable()</div><div class="line">    <span class="keyword">let</span> subscription = sequenceFromArray</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- from example ---</div><div class="line"><span class="type">Next</span>(<span class="number">1</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">2</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">3</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">4</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">5</span>)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><p><code>create</code> 可以通过闭包创建序列，通过 <code>.on(e: Event)</code> 添加事件。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"create"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> myJust = &#123; (singleElement: <span class="type">Int</span>) -&gt; <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt; <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> create &#123; observer <span class="keyword">in</span></div><div class="line">            observer.on(.<span class="type">Next</span>(singleElement))</div><div class="line">            observer.on(.<span class="type">Completed</span>)</div><div class="line">            <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> subscription = myJust(<span class="number">5</span>)</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- create example ---</div><div class="line"><span class="type">Next</span>(<span class="number">5</span>)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="failWith"><a href="#failWith" class="headerlink" title="failWith"></a>failWith</h3><p><code>failWith</code> 创建一个没有元素的序列，只会发送失败 <code>(.Error)</code> 事件。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"failWith"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> error = <span class="type">NSError</span>(domain: <span class="string">"Test"</span>, code: -<span class="number">1</span>, userInfo: <span class="literal">nil</span>)</div><div class="line">    <span class="keyword">let</span> erroredSequence: <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt; = failWith(error)</div><div class="line">    <span class="keyword">let</span> subscription = erroredSequence</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- failWith example ---</div><div class="line"><span class="type">Error</span>(<span class="type">Error</span> <span class="type">Domain</span>=<span class="type">Test</span> <span class="type">Code</span>=-<span class="number">1</span> <span class="string">"The operation couldn’t be completed. (Test error -1.)"</span>)</div></pre></td></tr></table></figure>
<h3 id="deferred"><a href="#deferred" class="headerlink" title="deferred"></a>deferred</h3><p><code>deferred</code> 会等到有订阅者的时候再通过工厂方法创建 <code>Observable</code> 对象，每个订阅者订阅的对象都是内容相同而完全独立的序列。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"deferred"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> deferredSequence: <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt; = deferred &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"creating"</span>)</div><div class="line">        <span class="keyword">return</span> create &#123; observer <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"emmiting"</span>)</div><div class="line">            observer.on(.<span class="type">Next</span>(<span class="number">0</span>))</div><div class="line">            observer.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">            observer.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">            <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"go"</span>)</div><div class="line">    deferredSequence</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">    deferredSequence</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- deferred example ---</div><div class="line">go</div><div class="line">creating</div><div class="line">emmiting</div><div class="line"><span class="type">Next</span>(<span class="number">0</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">1</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">2</span>)</div><div class="line">creating</div><div class="line">emmiting</div><div class="line"><span class="type">Next</span>(<span class="number">0</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">1</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p><code>defferd</code> 的其他用处：相当于一种延时加载，例如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"defferd"</span>) &#123; (<span class="number">_</span>) <span class="keyword">in</span></div><div class="line">    <span class="keyword">let</span> dispose = <span class="type">DisposeBag</span>()</div><div class="line">    <span class="keyword">var</span> value: <span class="type">String</span>? = <span class="literal">nil</span></div><div class="line">    <span class="keyword">let</span> subscription: <span class="type">Observable</span>&lt;<span class="type">String</span>?&gt; = <span class="type">Observable</span>.deferred &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>.just(value)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// got value</span></div><div class="line">    value = <span class="string">"Hello!"</span></div><div class="line">    subscription.subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">    &#125;.addDisposableTo(dispose)</div><div class="line">&#125;</div><div class="line">--- <span class="type">TestDeferred</span> example ---</div><div class="line"><span class="type">Next</span>(<span class="literal">nil</span>)</div><div class="line"><span class="type">Completed</span></div><div class="line">``` </div><div class="line"></div><div class="line">如果使用 `deffered` 则可以正常显示想要的数据：</div><div class="line"></div><div class="line">```swift</div><div class="line">example(<span class="string">"TestDeferred"</span>) &#123;</div><div class="line">    <span class="keyword">var</span> value: <span class="type">String</span>? = <span class="literal">nil</span></div><div class="line">    <span class="keyword">var</span> subscription: <span class="type">Observable</span>&lt;<span class="type">String</span>?&gt; = deferred &#123;</div><div class="line">        <span class="keyword">return</span> just(value)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// got value</span></div><div class="line">    value = <span class="string">"Hello!"</span></div><div class="line">    subscription.subscribe &#123; event <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">--- <span class="type">TestDeferred</span> example ---</div><div class="line"><span class="type">Next</span>(<span class="type">Optional</span>(<span class="string">"Hello!"</span>))</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h2 id="Subjects"><a href="#Subjects" class="headerlink" title="Subjects"></a>Subjects</h2><p><code>Subjects</code> 可以看做是一种代理和桥梁。它既是订阅者又是订阅源，这意味着它既可以订阅其他 <code>Observable</code> 对象，同事又可以对它的订阅者们发送事件。</p>
<p>定义一个辅助函数用于输出数据：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeSequenceToConsole</span>&lt;O: ObservableType&gt;<span class="params">(name: String, sequence: O)</span></span> &#123;</div><div class="line">    sequence</div><div class="line">        .subscribe &#123; e <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"Subscription: <span class="subst">\(name)</span>, event: <span class="subst">\(e)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h3><p><code>PublishSubject</code> 会发送订阅者从订阅之后的事件序列。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"PublishSubject"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    writeSequenceToConsole(<span class="string">"1"</span>, sequence: subject)</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"a"</span>))</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"b"</span>))</div><div class="line">    writeSequenceToConsole(<span class="string">"2"</span>, sequence: subject)</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"c"</span>))</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"d"</span>))</div><div class="line">&#125;</div><div class="line">--- <span class="type">PublishSubject</span> example ---</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(a)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(b)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(<span class="built_in">c</span>)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Next</span>(<span class="built_in">c</span>)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(d)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Next</span>(d)</div></pre></td></tr></table></figure>
<h3 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h3><p><code>ReplaySubject</code> 在新的订阅对象订阅的时候会补发所有已经发送过的数据队列， <code>bufferSize</code> 是缓冲区的大小，决定了补发队列的最大值。如果 <code>bufferSize</code> 是1，那么新的订阅者出现的时候就会补发上一个事件，如果是2，则补两个，以此类推。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"ReplaySubject"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">1</span>)</div><div class="line">    writeSequenceToConsole(<span class="string">"1"</span>, sequence: subject)</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"a"</span>))</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"b"</span>))</div><div class="line">    writeSequenceToConsole(<span class="string">"2"</span>, sequence: subject)</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"c"</span>))</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"d"</span>))</div><div class="line">&#125;</div><div class="line">--- <span class="type">ReplaySubject</span> example ---</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(a)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(b)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Next</span>(b) <span class="comment">// 补了一个 b</span></div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(<span class="built_in">c</span>)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Next</span>(<span class="built_in">c</span>)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(d)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Next</span>(d)</div></pre></td></tr></table></figure>
<h3 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h3><p><code>BehaviorSubject</code> 在新的订阅对象订阅的时候会发送最近发送的事件，如果没有则发送一个默认值。在新的订阅对象订阅的时候会发送最近发送的事件，如果没有则发送一个默认值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"BehaviorSubject"</span>) &#123; </div><div class="line">    <span class="keyword">let</span> subject = <span class="type">BehaviorSubject</span>(value: <span class="string">"z"</span>) </div><div class="line">    writeSequenceToConsole(<span class="string">"1"</span>, sequence: subject) </div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"a"</span>)) </div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"b"</span>)) </div><div class="line">    writeSequenceToConsole(<span class="string">"2"</span>, sequence: subject) </div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"c"</span>)) </div><div class="line">    subject.on(.<span class="type">Completed</span>) </div><div class="line">&#125; </div><div class="line"> </div><div class="line">--- <span class="type">BehaviorSubject</span> example --- </div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(z) </div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(a) </div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(b) </div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Next</span>(b) </div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(<span class="built_in">c</span>) </div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Next</span>(<span class="built_in">c</span>) </div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Completed</span> </div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><p><code>Variable</code> 是基于 <code>BehaviorSubject</code> 的一层封装，它的优势是：不会被显式终结。即：不会收到 <code>.Completed</code> 和 <code>.Error</code> 这类的终结事件，它会主动在析构的时候发送 <code>.Complete</code> 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"Variable"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> variable = <span class="type">Variable</span>(<span class="string">"z"</span>)</div><div class="line">    writeSequenceToConsole(<span class="string">"1"</span>, sequence: variable)</div><div class="line">    variable.value = <span class="string">"a"</span></div><div class="line">    variable.value = <span class="string">"b"</span></div><div class="line">    writeSequenceToConsole(<span class="string">"2"</span>, sequence: variable)</div><div class="line">    variable.value = <span class="string">"c"</span></div><div class="line">&#125;</div><div class="line">--- <span class="type">Variable</span> example ---</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(z)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(a)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(b)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Next</span>(b)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Next</span>(<span class="built_in">c</span>)</div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Next</span>(<span class="built_in">c</span>)</div><div class="line"><span class="type">Subscription</span>: <span class="number">1</span>, event: <span class="type">Completed</span></div><div class="line"><span class="type">Subscription</span>: <span class="number">2</span>, event: <span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map</code> 就是对每个元素都用函数做一次转换，挨个映射一遍。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"map"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> originalSequence = <span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">    originalSequence</div><div class="line">        .<span class="built_in">map</span> &#123; $<span class="number">0</span> * <span class="number">2</span> &#125;</div><div class="line">        .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">&#125;</div><div class="line">--- <span class="built_in">map</span> example ---</div><div class="line"><span class="type">Next</span>(<span class="number">2</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">4</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">6</span>)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p><code>map</code> 在做转换的时候很容易出现『升维』的情况，即：转变之后，从一个序列变成了一个序列的序列。<br>什么是『升维』？在集合中我们可以举这样一个例子，我有一个好友列表 <code>[p1, p2, p3]</code>，那么如果要获取我好友的好友的列表，可以这样做：<br><code>myFriends.map { $0.getFriends() }</code> 结果就成了 <code>[[p1-1, p1-2, p1-3], [p2-1], [p3-1, p3-2]]</code> ，这就成了好友的好友列表的列表了。这就是一个『升维』的例子。<br>在 Swift 中，我们可以用 <code>flatMap</code> 过滤掉 <code>map</code> 之后的 nil 结果。<br>在 Rx 中， <code>flatMap</code> 可以把一个序列转换成一组序列，然后再把这一组序列『拍扁』成一个序列。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"flatMap"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceInt = <span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">let</span> sequenceString = <span class="type">Observable</span>.of(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"--"</span>)</div><div class="line">            </div><div class="line">    sequenceInt</div><div class="line">        .flatMap &#123; int <span class="keyword">in</span></div><div class="line">            sequenceString</div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- flatMap example ---</div><div class="line"><span class="type">Next</span>(<span class="type">A</span>)</div><div class="line"><span class="type">Next</span>(<span class="type">B</span>)</div><div class="line"><span class="type">Next</span>(--)</div><div class="line"><span class="type">Next</span>(<span class="type">A</span>)</div><div class="line"><span class="type">Next</span>(<span class="type">B</span>)</div><div class="line"><span class="type">Next</span>(--)</div><div class="line"><span class="type">Next</span>(<span class="type">A</span>)</div><div class="line"><span class="type">Next</span>(<span class="type">B</span>)</div><div class="line"><span class="type">Next</span>(--)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h3><p><code>scan</code>有点像 <code>reduce</code> ，它会把每次的运算结果累积起来，作为下一次运算的输入值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"scan"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceToSum = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">    sequenceToSum</div><div class="line">        .scan(<span class="number">0</span>) &#123; acum, elem <span class="keyword">in</span></div><div class="line">            acum + elem</div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- scan example ---</div><div class="line"><span class="type">Next</span>(<span class="number">0</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">1</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">3</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">6</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">10</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">15</span>)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter 只会让符合条件的元素通过。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"filter"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> subscription = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</div><div class="line">        .<span class="built_in">filter</span> &#123;</div><div class="line">            $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- <span class="built_in">filter</span> example ---</div><div class="line"><span class="type">Next</span>(<span class="number">0</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">2</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">4</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">6</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">8</span>)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="Combining"><a href="#Combining" class="headerlink" title="Combining"></a>Combining</h3><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>zip 人如其名，就是合并两条队列用的，不过它会等到两个队列的元素一一对应地凑齐了之后再合并，正如百折不撓的米斯特菜所提醒的， zip 就像是拉链一样，两根拉链拉着拉着合并到了一根上：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"zip 1"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> intOb1 = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    <span class="keyword">let</span> intOb2 = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    <span class="built_in">zip</span>(intOb1, intOb2) &#123;</div><div class="line">        <span class="string">"<span class="subst">\($<span class="number">0</span>)</span> <span class="subst">\($<span class="number">1</span>)</span>"</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">    intOb1.on(.<span class="type">Next</span>(<span class="string">"A"</span>))</div><div class="line">    intOb2.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    intOb1.on(.<span class="type">Next</span>(<span class="string">"B"</span>))</div><div class="line">    intOb1.on(.<span class="type">Next</span>(<span class="string">"C"</span>))</div><div class="line">    intOb2.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">&#125;</div><div class="line">--- <span class="built_in">zip</span> <span class="number">1</span> example ---</div><div class="line"><span class="type">Next</span>(<span class="type">A</span> <span class="number">1</span>)</div><div class="line"><span class="type">Next</span>(<span class="type">B</span> <span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><code>merge</code> 即 合并，把两个队列按照顺序组合在一起。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"merge 1"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> subject1 = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    <span class="keyword">let</span> subject2 = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    sequenceOf(subject1, subject2)</div><div class="line">        .merge()</div><div class="line">        .subscribeNext &#123; int <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(int)</div><div class="line">        &#125;</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">    subject2.on(.<span class="type">Next</span>(<span class="number">3</span>))</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">4</span>))</div><div class="line">    subject2.on(.<span class="type">Next</span>(<span class="number">5</span>))</div><div class="line">&#125;</div><div class="line">--- merge <span class="number">1</span> example ---</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h3><p>如果存在两条事件队列，需要同时监听，那么每当有新的事件发生的时候，<code>combineLatest</code> 会将每个队列的最新的一个元素进行合并。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"combineLatest 1"</span>) &#123; </div><div class="line">    <span class="keyword">let</span> intOb1 = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;() </div><div class="line">    <span class="keyword">let</span> intOb2 = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;() </div><div class="line"> </div><div class="line">    combineLatest(intOb1, intOb2) &#123; </div><div class="line">        <span class="string">"<span class="subst">\($<span class="number">0</span>)</span> <span class="subst">\($<span class="number">1</span>)</span>"</span> </div><div class="line">        &#125; </div><div class="line">        .subscribe &#123; </div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>) </div><div class="line">        &#125; </div><div class="line"> </div><div class="line">    intOb1.on(.<span class="type">Next</span>(<span class="string">"A"</span>)) </div><div class="line">    intOb2.on(.<span class="type">Next</span>(<span class="number">1</span>)) </div><div class="line">    intOb1.on(.<span class="type">Next</span>(<span class="string">"B"</span>)) </div><div class="line">    intOb2.on(.<span class="type">Next</span>(<span class="number">2</span>)) </div><div class="line">&#125; </div><div class="line"> </div><div class="line">--- combineLatest <span class="number">1</span> example --- </div><div class="line"><span class="type">Next</span>(<span class="type">A</span> <span class="number">1</span>) </div><div class="line"><span class="type">Next</span>(<span class="type">B</span> <span class="number">1</span>) </div><div class="line"><span class="type">Next</span>(<span class="type">B</span> <span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h3><p><code>startWith</code> 会在队列开始之前插入一个事件元素</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"startWith"</span>) &#123; </div><div class="line">    <span class="keyword">let</span> subscription = <span class="type">Observable</span>.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) </div><div class="line">        .startWith(<span class="number">3</span>) </div><div class="line">        .subscribe &#123; </div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>) </div><div class="line">        &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">--- startWith example --- </div><div class="line"><span class="type">Next</span>(<span class="number">3</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">4</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">5</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">6</span>) </div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>当你的事件序列是一个事件序列的序列 (Observable<observable>) 的时候，（可以理解成二维序列？），可以使用 switch 将序列的序列平铺成一维，并且在出现新的序列的时候，自动切换到最新的那个序列上。 和 merge 相似的是，它也是起到了将多个序列『拍平』成一条序列的作用。</observable></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"switchLatest"</span>) &#123; </div><div class="line">    <span class="keyword">let</span> var1 = <span class="type">Variable</span>(<span class="number">0</span>) </div><div class="line"> </div><div class="line">    <span class="keyword">let</span> var2 = <span class="type">Variable</span>(<span class="number">200</span>) </div><div class="line"> </div><div class="line">    <span class="comment">// var3 is like an Observable&lt;Observable&lt;Int&gt;&gt; </span></div><div class="line">    <span class="keyword">let</span> var3 = <span class="type">Variable</span>(var1) </div><div class="line"> </div><div class="line">    <span class="keyword">let</span> d = var3 </div><div class="line">        .switchLatest() </div><div class="line">        .subscribe &#123; </div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>) </div><div class="line">        &#125; </div><div class="line"> </div><div class="line">    var1.value = <span class="number">1</span> </div><div class="line">    var1.value = <span class="number">2</span> </div><div class="line">    var1.value = <span class="number">3</span> </div><div class="line">    var1.value = <span class="number">4</span> </div><div class="line"> </div><div class="line">    var3.value = var2 </div><div class="line">    var2.value = <span class="number">201</span> </div><div class="line">    var1.value = <span class="number">5</span> </div><div class="line"> </div><div class="line">    var3.value = var1 </div><div class="line">    var2.value = <span class="number">202</span> </div><div class="line">    var1.value = <span class="number">6</span> </div><div class="line">&#125; </div><div class="line"> </div><div class="line">--- switchLatest example --- </div><div class="line"><span class="type">Next</span>(<span class="number">0</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">1</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">2</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">3</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">4</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">200</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">201</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">5</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">6</span>)</div></pre></td></tr></table></figure>
<h2 id="逻辑处理"><a href="#逻辑处理" class="headerlink" title="逻辑处理"></a>逻辑处理</h2><h3 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil"></a>takeUntil</h3><p><code>takeUntil</code> 其实就是 <code>take</code> ，它会在终于等到那个事件之后触发 <code>.Completed</code> 事件。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"takeUntil"</span>) &#123; </div><div class="line">    <span class="keyword">let</span> originalSequence = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;() </div><div class="line">    <span class="keyword">let</span> whenThisSendsNextWorldStops = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;() </div><div class="line"> </div><div class="line">    originalSequence </div><div class="line">        .takeUntil(whenThisSendsNextWorldStops) </div><div class="line">        .subscribe &#123; </div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>) </div><div class="line">        &#125; </div><div class="line"> </div><div class="line">    originalSequence.on(.<span class="type">Next</span>(<span class="number">1</span>)) </div><div class="line">    originalSequence.on(.<span class="type">Next</span>(<span class="number">2</span>)) </div><div class="line"> </div><div class="line">    whenThisSendsNextWorldStops.on(.<span class="type">Next</span>(<span class="number">1</span>)) </div><div class="line"> </div><div class="line">    originalSequence.on(.<span class="type">Next</span>(<span class="number">3</span>)) </div><div class="line">&#125; </div><div class="line"> </div><div class="line">--- takeUntil example --- </div><div class="line"><span class="type">Next</span>(<span class="number">1</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">2</span>) </div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile"></a>takeWhile</h3><p><code>takeWhile</code> 则是可以通过状态语句判断是否继续 <code>take</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"takeWhile"</span>) &#123; </div><div class="line">    <span class="keyword">let</span> sequence = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;() </div><div class="line">    sequence </div><div class="line">        .takeWhile &#123; int <span class="keyword">in</span> </div><div class="line">            int &lt; <span class="number">2</span> </div><div class="line">        &#125; </div><div class="line">        .subscribe &#123; </div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>) </div><div class="line">        &#125; </div><div class="line">    sequence.on(.<span class="type">Next</span>(<span class="number">1</span>)) </div><div class="line">    sequence.on(.<span class="type">Next</span>(<span class="number">2</span>)) </div><div class="line">    sequence.on(.<span class="type">Next</span>(<span class="number">3</span>)) </div><div class="line">&#125; </div><div class="line"> </div><div class="line">--- takeWhile example --- </div><div class="line"><span class="type">Next</span>(<span class="number">1</span>) </div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h2 id="Utility"><a href="#Utility" class="headerlink" title="Utility"></a>Utility</h2><p>针对事件序列的一些方法</p>
<h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><p><code>subscribe</code> 在前面已经接触过了，有新的事件就会触发。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"subscribe"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceOfInts = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    sequenceOfInts</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">    sequenceOfInts.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequenceOfInts.on(.<span class="type">Completed</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- subscribe example ---</div><div class="line"><span class="type">Next</span>(<span class="number">1</span>)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="subscribeNext"><a href="#subscribeNext" class="headerlink" title="subscribeNext"></a>subscribeNext</h3><p><code>subscribeNext</code> 也是订阅，但是只订阅 <code>.Next</code> 事件。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"subscribeNext"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceOfInts = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    sequenceOfInts</div><div class="line">        .subscribeNext &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">    sequenceOfInts.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequenceOfInts.on(.<span class="type">Completed</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- subscribeNext example ---</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="doOn"><a href="#doOn" class="headerlink" title="doOn"></a>doOn</h3><p><code>doOn</code> 可以监听事件，并且在事件发生之前调用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"doOn"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceOfInts = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    sequenceOfInts</div><div class="line">        .doOn &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Intercepted event <span class="subst">\($<span class="number">0</span>)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">    sequenceOfInts.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequenceOfInts.on(.<span class="type">Completed</span>)</div><div class="line">&#125;</div><div class="line">--- doOn example ---</div><div class="line"><span class="type">Intercepted</span> event <span class="type">Next</span>(<span class="number">1</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">1</span>)</div><div class="line"><span class="type">Intercepted</span> event <span class="type">Completed</span></div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>这里的 <code>reduce</code> 和 <code>CollectionType</code> 中的 <code>reduce</code> 是一个意思，都是指通过对一系列数据的运算最后生成一个结果。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"reduce"</span>) &#123;</div><div class="line">    <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</div><div class="line">        .<span class="built_in">reduce</span>(<span class="number">0</span>, +)</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- <span class="built_in">reduce</span> example ---</div><div class="line"><span class="type">Next</span>(<span class="number">45</span>)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h3><p>未使用 RxSwift 的 KVO</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(void)observeValueForKeyPath:(<span class="type">NSString</span> *)keyPath</div><div class="line">                     ofObject:(id)object</div><div class="line">                       change:(<span class="type">NSDictionary</span> *)change</div><div class="line">                      context:(void *)context</div></pre></td></tr></table></figure>
<p>使用 RxSwift 的 KVO</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">view.rx_observe(<span class="type">CGRect</span>.<span class="keyword">self</span>, <span class="string">"frame"</span>)</div><div class="line">    .subscribeNext &#123; frame <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"Got new frame <span class="subst">\(frame)</span>"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="Notification"><a href="#Notification" class="headerlink" title="Notification"></a>Notification</h3><p>使用 RxSwift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">NSNotificationCenter</span>.defaultCenter()</div><div class="line">    .rx_notification(<span class="type">UITextViewTextDidBeginEditingNotification</span>, object: myTextView)</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="comment">/*do something with data*/</span> &#125;</div></pre></td></tr></table></figure>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="catchError"><a href="#catchError" class="headerlink" title="catchError"></a>catchError</h3><p><code>catchError</code> 可以捕获异常事件，并且在后面无缝接上另一段事件序列，丝毫没有异常的痕迹。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"catchError 1"</span>) &#123; </div><div class="line">    <span class="keyword">let</span> sequenceThatFails = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;() </div><div class="line">    <span class="keyword">let</span> recoverySequence = <span class="type">Observable</span>.of(<span class="number">100</span>, <span class="number">200</span>) </div><div class="line"> </div><div class="line">    sequenceThatFails </div><div class="line">        .catchError &#123; error <span class="keyword">in</span> </div><div class="line">            <span class="keyword">return</span> recoverySequence </div><div class="line">        &#125; </div><div class="line">        .subscribe &#123; </div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>) </div><div class="line">        &#125; </div><div class="line"> </div><div class="line">    sequenceThatFails.on(.<span class="type">Next</span>(<span class="number">1</span>)) </div><div class="line">    sequenceThatFails.on(.<span class="type">Next</span>(<span class="number">2</span>)) </div><div class="line">    sequenceThatFails.on(.<span class="type">Error</span>(<span class="type">NSError</span>(domain: <span class="string">"Test"</span>, code: <span class="number">0</span>, userInfo: <span class="literal">nil</span>))) </div><div class="line">&#125; </div><div class="line"> </div><div class="line">--- catchError <span class="number">1</span> example --- </div><div class="line"><span class="type">Next</span>(<span class="number">1</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">2</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">100</span>) </div><div class="line"><span class="type">Next</span>(<span class="number">200</span>) </div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h3><p><code>retry</code> 顾名思义，就是在出现异常的时候会再去从头订阅事件序列，妄图通过『从头再来』解决异常。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"retry"</span>) &#123;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span> <span class="comment">// bad practice, only for example purposes</span></div><div class="line">    <span class="keyword">let</span> funnyLookingSequence: <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt; = create &#123; observer <span class="keyword">in</span></div><div class="line">        <span class="keyword">let</span> error = <span class="type">NSError</span>(domain: <span class="string">"Test"</span>, code: <span class="number">0</span>, userInfo: <span class="literal">nil</span>)</div><div class="line">        observer.on(.<span class="type">Next</span>(<span class="number">0</span>))</div><div class="line">        observer.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &lt; <span class="number">2</span> &#123;</div><div class="line">            observer.on(.<span class="type">Error</span>(error))</div><div class="line">            <span class="built_in">count</span>++</div><div class="line">        &#125;</div><div class="line">        observer.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">        observer.on(.<span class="type">Completed</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">    &#125;</div><div class="line">    funnyLookingSequence</div><div class="line">        .retry()</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- retry example ---</div><div class="line"><span class="type">Next</span>(<span class="number">0</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">1</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">0</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">1</span>)</div><div class="line"><span class="type">Next</span>(<span class="number">2</span>)</div><div class="line"><span class="type">Completed</span></div></pre></td></tr></table></figure>
<h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><p>国内：<br><a href="http://t.swift.gg/d/2-rxswift" target="_blank" rel="external">http://t.swift.gg/d/2-rxswift</a><br><a href="http://blog.csdn.net/Hello_Hwc/article/details/51859330" target="_blank" rel="external">http://blog.csdn.net/Hello_Hwc/article/details/51859330</a>          </p>
<p>=========         </p>
<p>国外：<br><a href="http://rx-marin.com/" target="_blank" rel="external">http://rx-marin.com/</a></p>
<p><a href="http://rxmarbles.com/" target="_blank" rel="external">http://rxmarbles.com/</a></p>
<p><a href="http://www.thedroidsonroids.com/blog/ios/rxswift-by-examples-1-the-basics/" target="_blank" rel="external">http://www.thedroidsonroids.com/blog/ios/rxswift-by-examples-1-the-basics/</a><br><a href="http://www.thedroidsonroids.com/blog/ios/rxswift-by-examples-2-observable-and-the-bind/" target="_blank" rel="external">http://www.thedroidsonroids.com/blog/ios/rxswift-by-examples-2-observable-and-the-bind/</a><br><a href="http://www.thedroidsonroids.com/blog/ios/rxswift-examples-3-networking/" target="_blank" rel="external">http://www.thedroidsonroids.com/blog/ios/rxswift-examples-3-networking/</a><br><a href="http://www.thedroidsonroids.com/blog/ios/rxswift-examples-4-multithreading/" target="_blank" rel="external">http://www.thedroidsonroids.com/blog/ios/rxswift-examples-4-multithreading/</a><br><a href="https://github.com/DroidsOnRoids/RxSwiftExamples" target="_blank" rel="external">https://github.com/DroidsOnRoids/RxSwiftExamples</a></p>
<p>GitHub<br><a href="https://github.com/DianQK/LearnRxSwift" target="_blank" rel="external">https://github.com/DianQK/LearnRxSwift</a><br><a href="https://github.com/devxoul/RxTodo" target="_blank" rel="external">https://github.com/devxoul/RxTodo</a></p>
]]></content>
      
        <categories>
            
            <category> iOS开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift——自定义类型]]></title>
      <url>http://huntermz.site/2016/07/21/Swift%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="Hashable-协议"><a href="#Hashable-协议" class="headerlink" title="Hashable 协议"></a>Hashable 协议</h2><ul>
<li><p>什么是Hashable(哈希值)？<br>  <code>Hashable</code> 常用于快速定位和查找（用于Set里面的对象和Dictionary里面的作为key的对象，都需要实现（Hashable）协议）被哈希的对象。</p>
<blockquote>
<p>计算机内部会维护一个HashTable的一个表（想象成数据库的表），表类似于键值对的形式存在，hashValue就作为键（类似于带有索引的一个没有唯一约束的一个字段，注：并非主键，因为一个hashValue可能对应多条记录（也就是多个对象）。再判断相等用Equatable）<br>原文链接：<a href="http://www.jianshu.com/p/5aa75cd5e13e" target="_blank" rel="external">http://www.jianshu.com/p/5aa75cd5e13e</a></p>
</blockquote>
</li>
<li><p>Swift 中的Hashable协议<br>  关于<code>Hashable</code> 协议，苹果官方文档中给出如下概述：</p>
<blockquote>
<p>A hash value, provided by a type’s hashValue property, is an integer that is the same for any two instances that compare equally. That is, for two instances a and b of the same type, if a == b then a.hashValue == b.hashValue. The reverse is not true: Two instances with equal hash values are not necessarily equal to each other.</p>
</blockquote>
<p>  可见通常我们可以通过比较两个类型的 <code>hash value</code> 来确定两个类型是否相等。</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>Hashable 的应用<br>  因为 <code>Hashable</code> 本身继承自 <code>Equatable</code>，当自定义的类型遵守 <code>Hashable</code> 协议的时候还有实现 <code>Equatable</code> 的方法：</p>
  <figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: GridPoint, rhs: GridPoint)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">   	<span class="keyword">return</span> lhs.x == rhs.x &amp;&amp; lhs.y == rhs.y</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">GridPoint</span>: <span class="title">Hashable</span> </span>&#123;</div><div class="line">   	<span class="keyword">var</span> hashValue: <span class="type">Int</span> &#123;</div><div class="line">       	<span class="keyword">return</span> x.hashValue ^ y.hashValue</div><div class="line">   	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Comparable协议"><a href="#Comparable协议" class="headerlink" title="Comparable协议"></a>Comparable协议</h2><ul>
<li><p>如果你的自定义类型想要实现比较大小，则需要遵守 <code>Comparable</code>协议，因为 <code>Comparable</code>继承自 <code>Equatable</code>协议，所以你必须实现一个 <code>==</code>方法，又因为本身定义，至少要实现 <code>&lt;</code> 方法，其他的操作符方法可选。例如：</p>
  <figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> &gt;<span class="params">(lhs: BasicModel, rhs: BasicModel)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">   	<span class="keyword">return</span> lhs.age &gt; rhs.age</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> &gt;=<span class="params">(lhs: BasicModel, rhs: BasicModel)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">  	 <span class="keyword">return</span> lhs.age &gt;= rhs.age</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> &lt;(lhs: BasicModel, rhs: BasicModel) -&gt; <span class="title">Bool</span> </span>&#123;</div><div class="line">   	<span class="keyword">return</span> lhs.age &lt; rhs.age</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> &lt;=(lhs: BasicModel, rhs: BasicModel) -&gt; <span class="title">Bool</span> </span>&#123;</div><div class="line">   	<span class="keyword">return</span> lhs.age &lt;= rhs.age</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据持久化保存——归档]]></title>
      <url>http://huntermz.site/2016/07/07/%E5%BD%92%E6%A1%A3/</url>
      <content type="html"><![CDATA[<ul>
<li>首先在使用归档前，要对归档的对象进行编码和解码，代码如下：</li>
</ul>
<p>Person.h 文件</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 如果想将一个自定义对象保存到文件中必须实现NSCoding协议</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span>&lt;<span class="title">NSCoding</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//姓名</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)<span class="built_in">NSString</span> *name;</div><div class="line"><span class="comment">//年龄</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>)<span class="keyword">int</span> age;</div><div class="line"><span class="comment">//身高</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>)<span class="keyword">double</span> height;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>Person.m 文件</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"></div><div class="line"> <span class="comment">// 当将一个自定义对象保存到文件的时候就会调用该方法</span></div><div class="line"> <span class="comment">// 在该方法中说明如何存储自定义对象的属性</span></div><div class="line"> <span class="comment">// 也就说在该方法中说清楚存储自定义对象的哪些属性</span></div><div class="line"> -(<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder</div><div class="line"> &#123;</div><div class="line">     <span class="built_in">NSLog</span>(<span class="string">@"调用了encodeWithCoder:方法"</span>);</div><div class="line">     [aCoder encodeObject:<span class="keyword">self</span>.name forKey:<span class="string">@"name"</span>];</div><div class="line">     [aCoder encodeInteger:<span class="keyword">self</span>.age forKey:<span class="string">@"age"</span>];</div><div class="line">     [aCoder encodeDouble:<span class="keyword">self</span>.height forKey:<span class="string">@"height"</span>];</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">// 当从文件中读取一个对象的时候就会调用该方法</span></div><div class="line"> <span class="comment">// 在该方法中说明如何读取保存在文件中的对象</span></div><div class="line"> <span class="comment">// 也就是说在该方法中说清楚怎么读取文件中的对象</span></div><div class="line"> -(<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder</div><div class="line"> &#123;</div><div class="line">     <span class="built_in">NSLog</span>(<span class="string">@"调用了initWithCoder:方法"</span>);</div><div class="line">     <span class="comment">//注意：在构造方法中需要先初始化父类的方法</span></div><div class="line">     <span class="keyword">if</span> (<span class="keyword">self</span>=[<span class="keyword">super</span> init]) &#123;</div><div class="line">         <span class="keyword">self</span>.name=[aDecoder decodeObjectForKey:<span class="string">@"name"</span>];</div><div class="line">         <span class="keyword">self</span>.age=[aDecoder decodeIntegerForKey:<span class="string">@"age"</span>];</div><div class="line">         <span class="keyword">self</span>.height=[aDecoder decodeDoubleForKey:<span class="string">@"height"</span>];</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>归档过程</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.创建对象</span></div><div class="line">Person *p=[[Person alloc]init];</div><div class="line">p.name=<span class="string">@"Hunter"</span>;</div><div class="line">p.age=<span class="number">23</span>;</div><div class="line">p.height=<span class="number">1.7</span>;</div><div class="line"></div><div class="line"><span class="comment">// 2.获取文件路径</span></div><div class="line"><span class="built_in">NSString</span> *docPath=[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)lastObject];</div><div class="line"><span class="built_in">NSString</span> *path=[docPath stringByAppendingPathComponent:<span class="string">@"person.file"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"path=%@"</span>,path);</div><div class="line"></div><div class="line"><span class="comment">// 3.将自定义的对象保存到文件中</span></div><div class="line">[<span class="built_in">NSKeyedArchiver</span> archiveRootObject:p toFile:path];</div></pre></td></tr></table></figure>
<ul>
<li>解档过程</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.获取文件路径</span></div><div class="line"><span class="built_in">NSString</span> *docPath=[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)lastObject];</div><div class="line"><span class="built_in">NSString</span> *path=[docPath stringByAppendingPathComponent:<span class="string">@"person.yangyang"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"path=%@"</span>,path);</div><div class="line"></div><div class="line"><span class="comment">//2.从文件中读取对象</span></div><div class="line">Person *p=[<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithFile:path];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@,%d,%.1f"</span>,p.name,p.age,p.height);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据持久化保存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL语句的简单使用]]></title>
      <url>http://huntermz.site/2016/07/07/SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<ul>
<li>字段类型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">integer: 整形值</div><div class="line">real: 浮点值</div><div class="line">text: 文本字符串</div><div class="line">blob: 二进制数据(比如文件)</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>创建表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名<span class="number">1</span> 字段类型， 字段名<span class="number">2</span> 字段类型， ...)</div></pre></td></tr></table></figure>
<ul>
<li>删表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名 ;</div><div class="line"></div><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> 表名 ;</div></pre></td></tr></table></figure>
<ul>
<li>插入数据 (insert)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (字段<span class="number">1</span>, 字段<span class="number">2</span>, …) <span class="keyword">values</span> (字段<span class="number">1</span>的值, 字段<span class="number">2</span>的值, …) ;</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_table (<span class="keyword">name</span>, age) <span class="keyword">values</span> (‘mj’, <span class="number">10</span>) ;</div></pre></td></tr></table></figure>
<ul>
<li>更新数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span> = 字段<span class="number">1</span>的值, 字段<span class="number">2</span> = 字段<span class="number">2</span>的值, … ;</div><div class="line"></div><div class="line"><span class="keyword">update</span> test_table <span class="keyword">set</span> <span class="keyword">name</span> = ‘jack’, age = <span class="number">20</span> ;</div></pre></td></tr></table></figure>
<ul>
<li>删除数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 ;</div><div class="line"></div><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test_table ;  // 会删除test_table中的所有数据</div></pre></td></tr></table></figure>
<ul>
<li>条件语句</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">条件语句的常见格式:</div><div class="line"></div><div class="line">where 字段 = 某个值 ;   // 不能用两个 =</div><div class="line"></div><div class="line">where 字段 is 某个值 ;   // is 相当于 =</div><div class="line"></div><div class="line">where 字段 != 某个值 ;</div><div class="line"></div><div class="line">where 字段 is not 某个值 ;   // is not 相当于 !=</div><div class="line"></div><div class="line">where 字段 &gt; 某个值 ;</div><div class="line"></div><div class="line">where 字段1 = 某个值 and 字段2 &gt; 某个值 ;  // and相当于C语言中的 &amp;&amp;</div><div class="line"></div><div class="line">where 字段1 = 某个值 or 字段2 = 某个值 ;  //  or 相当于C语言中的 ||</div><div class="line"></div><div class="line">示例:</div><div class="line">update t_student set age = 5 where age &gt; 10 and name != ‘jack’ ;</div><div class="line"></div><div class="line">delete from t_student where age &lt;= 10 or age &gt; 30 ;</div></pre></td></tr></table></figure>
<ul>
<li>DQL语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">格式</div><div class="line"></div><div class="line"><span class="keyword">select</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, … <span class="keyword">from</span> 表名 ;</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名;   //  查询所有的字段</div><div class="line"></div><div class="line"></div><div class="line">示例</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">name</span>, age <span class="keyword">from</span> test_table ;</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_table ;</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_table <span class="keyword">where</span> age &gt; <span class="number">10</span> ;  //  条件查询</div></pre></td></tr></table></figure>
<ul>
<li>起别名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">格式(字段和表都可以起别名)</div><div class="line"></div><div class="line"><span class="keyword">select</span> 字段<span class="number">1</span> 别名 , 字段<span class="number">2</span> 别名 , … <span class="keyword">from</span> 表名 别名 ;</div><div class="line"></div><div class="line"><span class="keyword">select</span> 字段<span class="number">1</span> 别名, 字段<span class="number">2</span> <span class="keyword">as</span> 别名, … <span class="keyword">from</span> 表名 <span class="keyword">as</span> 别名 ;</div><div class="line"></div><div class="line"><span class="keyword">select</span> 别名.字段<span class="number">1</span>, 别名.字段<span class="number">2</span>, … <span class="keyword">from</span> 表名 别名 ;</div><div class="line"></div><div class="line"></div><div class="line">示例</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">name</span> myname, age myage <span class="keyword">from</span> test_table ;  // 给name起个叫做myname的别名，给age起个叫做myage的别名</div><div class="line"></div><div class="line"><span class="keyword">select</span> s.name, s.age <span class="keyword">from</span> test_table s ;  //给test_table表起个别名叫做s，利用s来引用表中的字段</div></pre></td></tr></table></figure>
<ul>
<li>查询表中某一记录的数量</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">格式</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span> (字段) <span class="keyword">from</span> 表名 ;</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span> ( * ) <span class="keyword">from</span> 表名 ;</div><div class="line"></div><div class="line"></div><div class="line">示例</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span> (age) <span class="keyword">from</span> test_table ;</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span> ( * ) <span class="keyword">from</span> test_table <span class="keyword">where</span> score &gt;= <span class="number">60</span>;</div></pre></td></tr></table></figure>
<ul>
<li>排序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">查询出来的结果可以用order by进行排序</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_student <span class="keyword">order</span> <span class="keyword">by</span> 字段 ;</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_student <span class="keyword">order</span> <span class="keyword">by</span> age ;</div><div class="line"></div><div class="line"></div><div class="line">默认是按照升序排序（由小到大），也可以变为降序（由大到小）</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> ;  //降序</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> ;   // 升序（默认）</div><div class="line"></div><div class="line"></div><div class="line">也可以用多个字段进行排序</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>, height <span class="keyword">desc</span> ;</div><div class="line"></div><div class="line">先按照年龄排序（升序），年龄相等就按照身高排序（降序）</div></pre></td></tr></table></figure>
<ul>
<li>使用limit</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">使用limit可以精确地控制查询结果的数量，比如每次只查询10条数据</div><div class="line"></div><div class="line">格式</div><div class="line"></div><div class="line">select * from 表名 limit 数值1, 数值2 ;  // 数值1表示从第几个数开始，数值2表示每次查询多少个</div><div class="line"></div><div class="line">示例</div><div class="line"></div><div class="line">select * from t_student limit 4, 8 ;</div><div class="line"></div><div class="line">可以理解为：跳过最前面4条语句，然后取8条记录</div><div class="line"></div><div class="line">limit常用来做分页查询，比如每页固定显示5条数据，那么应该这样取数据</div><div class="line"></div><div class="line">第1页：limit 0, 5</div><div class="line"></div><div class="line">第2页：limit 5, 5</div><div class="line"></div><div class="line">第3页：limit 10, 5</div><div class="line"></div><div class="line">…</div><div class="line"></div><div class="line">第n页：limit 5*(n-1), 5</div><div class="line"></div><div class="line">select * from t_student limit 7 ;这条语句的作用相当于select * from t_student limit 0, 7 ;表示取最前面的7条记录</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程和多任务]]></title>
      <url>http://huntermz.site/2016/07/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%A4%9A%E4%BB%BB%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h2 id="iOS-提供的多线程方案"><a href="#iOS-提供的多线程方案" class="headerlink" title="iOS 提供的多线程方案"></a>iOS 提供的多线程方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. Pthreads</div><div class="line">2. NSThread</div><div class="line">3. GCD</div><div class="line">4. NSOperation &amp; NSOperationQueue</div></pre></td></tr></table></figure>
<p><img src="https://o9xwn216o.qnssl.com/blog-img/1467887537015.png" alt=""></p>
<a id="more"></a>
<h2 id="Pthread"><a href="#Pthread" class="headerlink" title="Pthread"></a>Pthread</h2><p>需要导入头文件，iOS开发中几乎用不到</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;pthread.h&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="NSThread"><a href="#NSThread" class="headerlink" title="NSThread"></a>NSThread</h2><p>多用于调试，三种线程调度方法</p>
<ul>
<li>alloc / init</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span>.person selector:<span class="keyword">@selector</span>(longOperation:) object:<span class="string">@"THREAD"</span>];</div><div class="line"></div><div class="line">[thread start];</div></pre></td></tr></table></figure>
<ul>
<li>detach</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(longOperation:) toTarget:<span class="keyword">self</span>.person withObject:<span class="string">@"DETACH"</span>];</div></pre></td></tr></table></figure>
<ul>
<li>分类方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span>.person performSelectorInBackground:<span class="keyword">@selector</span>(longOperation:) withObject:<span class="string">@"PERFORM"</span>];</div></pre></td></tr></table></figure>
<h2 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h2><p><strong>任务</strong>：即操作，你想要干什么，说白了就是一段代码，在 GCD 中就是一个 Block，任务有同步执行 和 异步执行两种执行方式，他们之间的区别是 是否会创建新的线程。    </p>
<p>  <strong>同步执行</strong>: 一般来说，只要是同步执行的任务，都会在当前线程执行，不会另开线程。但是当在其他线程往主线程派发任务，则会回到主线程执行；同步执行会阻塞当前线程，并等待block中的任务执行完毕，然后当前线程才会继续往下执行。     </p>
<p>  <strong>异步执行</strong>: 一般来说只要是异步执行的任务，都会另开线程，在别的线程执行。但是当在主线程异步派发任务到主线程，还是会在主线程执行，不会另开线程的；当前线程会直接往下执行，不会阻塞当前线程。</p>
<p><strong>队列</strong>：用于存放任务。一共有两种队列， <strong>串行队列</strong> 和 <strong>并行队列</strong>    </p>
<p>  <strong>串行队列</strong> 中的任务会根据队列的定义 FIFO 的执行，一个接一个的先进先出的进行执行。</p>
<blockquote>
<p><strong>注：放到串行队列的任务，GCD 会 <code>FIFO（先进先出）</code> 地取出来一个，执行一个，然后取下一个，这样一个一个的执行。</strong>      </p>
</blockquote>
<p>  <strong>并行队列</strong> 中的任务 根据同步或异步有不同的执行方式。     </p>
<blockquote>
<p><strong>注</strong>：放到并行队列的任务，GCD 也会 <code>FIFO</code>的取出来，但不同的是，它取出来一个就会放到别的线程，然后再取出来一个又放到另一个的线程。这样由于取的动作很快，忽略不计，看起来，所有的任务都是一起执行的。不过需要注意，GCD 会根据系统资源控制并行的数量，所以如果任务很多，它并不会让所有任务同时执行。**</p>
</blockquote>
<p>线程在队列中的执行方式总结如下表:     </p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"><strong>同步执行</strong></th>
<th style="text-align:center"><strong>异步执行</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>串行队列</strong></td>
<td style="text-align:center">当前线程，一个一个执行</td>
<td style="text-align:center">其他线程，一个一个执行</td>
</tr>
<tr>
<td style="text-align:center"><strong>并行队列</strong></td>
<td style="text-align:center">当前线程，一个一个执行</td>
<td style="text-align:center">开很多线程，一起执行</td>
</tr>
</tbody>
</table>
<h3 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h3><p><strong>主队列</strong>：这是一个特殊的<code>串行队列</code>。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</div></pre></td></tr></table></figure>
<p><strong>自己创建的队列</strong>：凡是自己创建的队列默认都是 <code>串行队列</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建串行队列</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"tk.bourne.testQueue"</span>, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"tk.bourne.testQueue"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line"></div><div class="line"><span class="comment">// 创建并行队列</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"tk.bourne.testQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</div></pre></td></tr></table></figure>
<p><strong>全局并行队列</strong>：这应该是唯一一个并行队列， 只要是并行任务一般都加入到这个队列。这是系统提供的一个并发队列。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h2 id="NSOperation和NSOperationQueue"><a href="#NSOperation和NSOperationQueue" class="headerlink" title="NSOperation和NSOperationQueue"></a>NSOperation和NSOperationQueue</h2><p>操作步骤：</p>
<ol>
<li>将要执行的任务封装到一个 <code>NSOperation</code> 对象中。</li>
<li>将此任务添加到一个 <code>NSOperationQueue</code> 对象中。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>http://huntermz.site/2016/07/07/%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>此文用来收录常见的排序算法</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///  冒泡排序</span></div><div class="line"><span class="comment">///  - language: Swift</span></div><div class="line"><span class="comment">///  - parameter array: 要排序的数组</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///  - returns: 排序后的数组</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubbleSort</span><span class="params">(array: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">   <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></div><div class="line">   <span class="keyword">var</span> source = array</div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;source.<span class="built_in">count</span> &#123;</div><div class="line">       <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;source.<span class="built_in">count</span> - i - <span class="number">1</span> &#123;</div><div class="line">           <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">           <span class="keyword">if</span> source[j] &gt; source[j + <span class="number">1</span>] &#123;</div><div class="line">               <span class="keyword">let</span> temp = source[j]</div><div class="line">               source[j] = source[j + <span class="number">1</span>]</div><div class="line">               source[j + <span class="number">1</span>] = temp</div><div class="line">           &#125;</div><div class="line">           </div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> source</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">///  选择排序</span></div><div class="line"><span class="comment">///  - language: Swift</span></div><div class="line"><span class="comment">///  - parameter array: 要排序的数组</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///  - returns: 排序后的数组</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">SelectionSort</span><span class="params">(array: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> source = array</div><div class="line">   </div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;source.<span class="built_in">count</span>&#123;</div><div class="line">       <span class="keyword">var</span> <span class="built_in">min</span> = i</div><div class="line">       <span class="keyword">for</span> j <span class="keyword">in</span> i..&lt;source.<span class="built_in">count</span> &#123;</div><div class="line">           <span class="keyword">if</span> source[j] &lt; source[<span class="built_in">min</span>] &#123;</div><div class="line">               <span class="built_in">min</span> = j</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="keyword">if</span> i != <span class="built_in">min</span> &#123;</div><div class="line">           <span class="keyword">let</span> temp = source[i]</div><div class="line">           source[i] = source[<span class="built_in">min</span>]</div><div class="line">           source[<span class="built_in">min</span>] = temp</div><div class="line">           </div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> source</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">///  快速排序</span></div><div class="line"><span class="comment">///  - language: Swift</span></div><div class="line"><span class="comment">///  - parameter array: 要排序的数组</span></div><div class="line"><span class="comment">///  - 思路：辅助空间</span></div><div class="line"><span class="comment">///  - returns: 排序后的数组</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(data: [NSInteger])</span></span> -&gt; [<span class="type">NSInteger</span>] &#123;</div><div class="line">   <span class="keyword">if</span> data.<span class="built_in">count</span> &lt;= <span class="number">1</span> &#123;</div><div class="line">       <span class="keyword">return</span> data</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">let</span> pivot = data[data.<span class="built_in">count</span> - <span class="number">1</span>]   <span class="comment">// 取数组的最后一个数为基准值</span></div><div class="line">   <span class="keyword">var</span> <span class="keyword">left</span> = [<span class="type">NSInteger</span>]()           <span class="comment">// 存放比基准值小的数</span></div><div class="line">   <span class="keyword">var</span> <span class="keyword">right</span> = [<span class="type">NSInteger</span>]()          <span class="comment">// 存放比基准值打的数</span></div><div class="line">   </div><div class="line">   <span class="comment">// 遍历数组</span></div><div class="line">   <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>..&lt;data.<span class="built_in">count</span> - <span class="number">1</span> &#123;</div><div class="line">       <span class="keyword">if</span> data[index] &lt; pivot &#123;       <span class="comment">// 如果小就放到左边</span></div><div class="line">           <span class="keyword">left</span>.append(data[index])</div><div class="line">       &#125; <span class="keyword">else</span> &#123;                       <span class="comment">// 如果大就放在右边</span></div><div class="line">           <span class="keyword">right</span>.append(data[index])</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> result = <span class="type">QuickSort</span>(<span class="keyword">left</span>)         <span class="comment">// 对左边的数组进行快速排序</span></div><div class="line">   result.append(pivot)                 <span class="comment">// 在排序后的数组后拼接基准值</span></div><div class="line">   <span class="keyword">let</span> rightResult = <span class="type">QuickSort</span>(<span class="keyword">right</span>)   <span class="comment">// 对右边的数组进行快速排序</span></div><div class="line">   result.appendContentsOf(rightResult) <span class="comment">// 左边的数组拼接右边的数组即最终的结果</span></div><div class="line">   <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
